Directory structure:
└── beluxstyle-keystone-backend/
    ├── README.md
    ├── auth.ts
    ├── keystone.db
    ├── keystone.ts
    ├── next.config.mjs
    ├── package.json
    ├── schema.graphql
    ├── schema.prisma
    ├── tsconfig.json
    ├── public/
    └── src/
        ├── middleware.ts
        ├── app/
        │   ├── layout.tsx
        │   ├── page.tsx
        │   ├── admin/
        │   │   └── login/
        │   │       └── page.tsx
        │   ├── api/
        │   │   ├── auth/
        │   │   │   └── [...nextauth]/
        │   │   │       └── route.ts
        │   │   └── keystone-auth/
        │   │       └── route.ts
        │   └── dashboard/
        │       └── page.tsx
        ├── components/
        │   ├── CustomIcons.tsx
        │   └── ForgotPassword.tsx
        ├── keystone/
        │   ├── context.ts
        │   ├── schema.ts
        │   └── seed.ts
        ├── pages/
        │   └── api/
        │       └── graphql.ts
        ├── shared-theme/
        │   ├── AppTheme.tsx
        │   ├── ColorModeIconDropdown.tsx
        │   ├── ColorModeSelect.tsx
        │   ├── themePrimitives.ts
        │   └── customizations/
        │       ├── dataDisplay.tsx
        │       ├── feedback.tsx
        │       ├── inputs.tsx
        │       ├── navigation.tsx
        │       └── surfaces.ts
        ├── styles/
        │   └── globals.css
        └── util/
            ├── emotion-cache.ts
            ├── login.ts
            └── request.ts

================================================
File: README.md
================================================
# Next.js + Keystone

Keystone can be used as a data engine in Next.js applications without having to host a separate Keystone server.
This is made possible by Keystone's `getContext` API.

- **CRUD data within your Next.js server**: You can use Keystone data APIs directly in Next.js `getStaticProps` or `getServerSideProps` to CRUD data. ⚡️
- **CRUD data from browser**: You can use the generated Keystone GraphQL schema to setup your own GraphQL server in a Next.js route. This enables you to send GraphQL requests from the browser. 🤯 (refer to [/pages/api/graphql.ts](/pages/api/graphql.ts) for implementation details)
- You don't have to start the Keystone server at all.

_Note: Since you are not starting the keystone server, the Admin UI will not be available. You can host Keystone as a separate server if you need Admin UI._

## Notes

- This example is setup with seed data. Demo user email is `bruce@email.com`, password is `passw0rd`.
- `pnpm next:dev` is all you need to develop your Next.js app. You don't need to start the keystone server since `getContext` will work without starting the Keystone server.
- However when you make changes to your keystone lists, the schema files need to be regenerated. So you'll either have to run `pnpm keystone:dev` or `pnpm keystone:build` just once after making changes to your lists. Alternatively you can open two terminal tabs and run both `pnpm keystone:dev` and `pnpm next:dev` concurrently during development.
- When you deploy your Next.js app, remember to run `pnpm keystone:build` once to make sure you have the latest schema files built for `getContext` API.

## FAQ

### 1. Why won't Admin UI work?

Admin UI needs the Keystone server to run. Your Next.js app runs on a Next.js server. Keystone's Admin UI runs on Keystone server. You can't have two servers running in a Next.js production environment. Since we are not starting the Keystone server in production builds, we won't have access to Keystone's Admin UI. You can access it in local (use the command `pnpm keystone:dev`) because you can easily start two servers in your local but once you deploy your Next.js app you won't have access to the Admin UI.

### 2. What should I do to both use Keystone in my Next.js app and have a fully functioning Admin UI?

Easy. Deploy twice to two different servers.

1. Deploy your Next.js app to one instance (Eg. Vercel).
2. Deploy the Keystone server (commands in package.json) to another instance (Eg. Digital Ocean).

Both these apps connect to the same database and are built with the same source code so everything will work as you expect it to.

## Give it a try

Deploy this example to Vercel and see it for yourself.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fkeystonejs%2Fkeystone%2Ftree%2Fmain%2Fexamples%2Fframework-nextjs-app-directory)


================================================
File: auth.ts
================================================
import { createAuth } from '@keystone-6/auth';
import { statelessSessions } from '@keystone-6/core/session';

const sessionSecret = process.env.SESSION_SECRET || process.env.NEXTAUTH_SECRET;

export const { withAuth } = createAuth({
  listKey: 'User',
  identityField: 'email',
  secretField: 'password',
  sessionData: 'id name email rol { level }',
  initFirstItem: {
    fields: ['name', 'email', 'password'],
  },
});

export const session = statelessSessions({
  maxAge: 60 * 60 * 24 * 30, // 30 días
  secret: sessionSecret,
});


================================================
File: keystone.ts
================================================
import { config } from '@keystone-6/core'
import { lists } from './src/keystone/schema'
import { seedDemoData } from './src/keystone/seed'
import type { Context } from '.keystone/types'
import { withAuth, session } from './auth';

export default withAuth(
  config({
  db: {
    provider: 'mysql',
      url: process.env.DATABASE_URL || '',

    // WARNING: this is only needed for our monorepo examples, dont do this
    prismaClientPath: 'node_modules/myprisma',
  },
  lists,
  ui: {
    isAccessAllowed: ({ session }) => !!session?.user,
  },
  session,
  server: {
    cors: {
      origin: ['*'],
      credentials: true,
    },
    extendExpressApp: (app) => {
      app.use((req, res, next) => {
        console.log('A request!');
        next();
      });
    },
  },
})
);

================================================
File: next.config.mjs
================================================
// you don't need this if you're building something outside of the Keystone repo
import withPreconstruct from '@preconstruct/next'

export default withPreconstruct({
  experimental: {
    // without this, 'Error: Expected Upload to be a GraphQL nullable type.'
    serverComponentsExternalPackages: ['graphql'],
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
})


================================================
File: package.json
================================================
{
  "name": "@keystone-6/example-framework-nextjs-app-directory",
  "version": null,
  "private": true,
  "license": "MIT",
  "scripts": {
    "keystone:dev": "keystone dev",
    "keystone:build": "keystone build",
    "keystone:start": "keystone start",
    "next:dev": "next dev -p 3000",
    "next:build": "next build",
    "build": "pnpm keystone build --no-ui && pnpm next build",
    "postinstall": "keystone postinstall",
    "start": "next start"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@keystone-6/auth": "^8.1.0",
    "@keystone-6/core": "^6.3.1",
    "@keystone-6/document-renderer": "^1.1.2",
    "@keystone-6/fields-document": "^9.1.1",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "@preconstruct/next": "^4.0.0",
    "@prisma/client": "5.19.0",
    "bcrypt": "^5.1.1",
    "graphql": "^16.8.1",
    "graphql-request": "^5.0.0",
    "graphql-yoga": "^3.1.0",
    "next": "^14.2.0",
    "next-auth": "^4.24.11",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20.14.10",
    "@types/react-dom": "^18.3.0",
    "prisma": "5.19.0",
    "react": "^18.3.1",
    "typescript": "^5.5.0"
  }
}


================================================
File: schema.graphql
================================================
# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  agente: Int
}

input AdminWhereUniqueInput {
  id: ID
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  agente: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  agente: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  agente: Int
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  agente: Int
}

type Categoria {
  id: ID!
  name: String
}

input CategoriaWhereUniqueInput {
  id: ID
}

input CategoriaWhereInput {
  AND: [CategoriaWhereInput!]
  OR: [CategoriaWhereInput!]
  NOT: [CategoriaWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CategoriaOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoriaUpdateInput {
  name: String
}

input CategoriaUpdateArgs {
  where: CategoriaWhereUniqueInput!
  data: CategoriaUpdateInput!
}

input CategoriaCreateInput {
  name: String
}

type Comunidad {
  id: ID!
  name: String
  direccion: String
  cp: Int
  admin: Admin
  cif: String
  author: User
  createdAt: DateTime
  updatedAt: DateTime
  edificios(where: EdificioWhereInput! = {}, orderBy: [EdificioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EdificioWhereUniqueInput): [Edificio!]
  edificiosCount(where: EdificioWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ComunidadWhereUniqueInput {
  id: ID
}

input ComunidadWhereInput {
  AND: [ComunidadWhereInput!]
  OR: [ComunidadWhereInput!]
  NOT: [ComunidadWhereInput!]
  id: IDFilter
  name: StringFilter
  direccion: StringFilter
  cp: IntNullableFilter
  admin: AdminWhereInput
  cif: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  edificios: EdificioManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input EdificioManyRelationFilter {
  every: EdificioWhereInput
  some: EdificioWhereInput
  none: EdificioWhereInput
}

input ComunidadOrderByInput {
  id: OrderDirection
  name: OrderDirection
  direccion: OrderDirection
  cp: OrderDirection
  cif: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ComunidadUpdateInput {
  name: String
  direccion: String
  cp: Int
  admin: AdminRelateToOneForUpdateInput
  cif: String
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  edificios: EdificioRelateToManyForUpdateInput
}

input AdminRelateToOneForUpdateInput {
  create: AdminCreateInput
  connect: AdminWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EdificioRelateToManyForUpdateInput {
  disconnect: [EdificioWhereUniqueInput!]
  set: [EdificioWhereUniqueInput!]
  create: [EdificioCreateInput!]
  connect: [EdificioWhereUniqueInput!]
}

input ComunidadUpdateArgs {
  where: ComunidadWhereUniqueInput!
  data: ComunidadUpdateInput!
}

input ComunidadCreateInput {
  name: String
  direccion: String
  cp: Int
  admin: AdminRelateToOneForCreateInput
  cif: String
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  edificios: EdificioRelateToManyForCreateInput
}

input AdminRelateToOneForCreateInput {
  create: AdminCreateInput
  connect: AdminWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input EdificioRelateToManyForCreateInput {
  create: [EdificioCreateInput!]
  connect: [EdificioWhereUniqueInput!]
}

type Contacto {
  id: ID!
  name: String
  telefono: String
  piso: String
  edificio: Edificio
  comunidad: Comunidad
  tipo: String
}

input ContactoWhereUniqueInput {
  id: ID
}

input ContactoWhereInput {
  AND: [ContactoWhereInput!]
  OR: [ContactoWhereInput!]
  NOT: [ContactoWhereInput!]
  id: IDFilter
  name: StringFilter
  telefono: StringFilter
  piso: StringFilter
  edificio: EdificioWhereInput
  comunidad: ComunidadWhereInput
  tipo: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ContactoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  telefono: OrderDirection
  piso: OrderDirection
  tipo: OrderDirection
}

input ContactoUpdateInput {
  name: String
  telefono: String
  piso: String
  edificio: EdificioRelateToOneForUpdateInput
  comunidad: ComunidadRelateToOneForUpdateInput
  tipo: String
}

input EdificioRelateToOneForUpdateInput {
  create: EdificioCreateInput
  connect: EdificioWhereUniqueInput
  disconnect: Boolean
}

input ComunidadRelateToOneForUpdateInput {
  create: ComunidadCreateInput
  connect: ComunidadWhereUniqueInput
  disconnect: Boolean
}

input ContactoUpdateArgs {
  where: ContactoWhereUniqueInput!
  data: ContactoUpdateInput!
}

input ContactoCreateInput {
  name: String
  telefono: String
  piso: String
  edificio: EdificioRelateToOneForCreateInput
  comunidad: ComunidadRelateToOneForCreateInput
  tipo: String
}

input EdificioRelateToOneForCreateInput {
  create: EdificioCreateInput
  connect: EdificioWhereUniqueInput
}

input ComunidadRelateToOneForCreateInput {
  create: ComunidadCreateInput
  connect: ComunidadWhereUniqueInput
}

type Documento {
  id: ID!
  name: String
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentoWhereUniqueInput {
  id: ID
}

input DocumentoWhereInput {
  AND: [DocumentoWhereInput!]
  OR: [DocumentoWhereInput!]
  NOT: [DocumentoWhereInput!]
  id: IDFilter
  name: StringFilter
  archivo: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DocumentoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  archivo: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DocumentoUpdateInput {
  name: String
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentoUpdateArgs {
  where: DocumentoWhereUniqueInput!
  data: DocumentoUpdateInput!
}

input DocumentoCreateInput {
  name: String
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Edificio {
  id: ID!
  name: String
  comunidad: Comunidad
  instalaciones(where: InstalacionWhereInput! = {}, orderBy: [InstalacionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstalacionWhereUniqueInput): [Instalacion!]
  instalacionesCount(where: InstalacionWhereInput! = {}): Int
  tipo: String
  admin: Admin
  label: String
}

input EdificioWhereUniqueInput {
  id: ID
}

input EdificioWhereInput {
  AND: [EdificioWhereInput!]
  OR: [EdificioWhereInput!]
  NOT: [EdificioWhereInput!]
  id: IDFilter
  name: StringFilter
  comunidad: ComunidadWhereInput
  instalaciones: InstalacionManyRelationFilter
  tipo: StringNullableFilter
  admin: AdminWhereInput
}

input InstalacionManyRelationFilter {
  every: InstalacionWhereInput
  some: InstalacionWhereInput
  none: InstalacionWhereInput
}

input EdificioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  tipo: OrderDirection
}

input EdificioUpdateInput {
  name: String
  comunidad: ComunidadRelateToOneForUpdateInput
  instalaciones: InstalacionRelateToManyForUpdateInput
  tipo: String
  admin: AdminRelateToOneForUpdateInput
}

input InstalacionRelateToManyForUpdateInput {
  disconnect: [InstalacionWhereUniqueInput!]
  set: [InstalacionWhereUniqueInput!]
  create: [InstalacionCreateInput!]
  connect: [InstalacionWhereUniqueInput!]
}

input EdificioUpdateArgs {
  where: EdificioWhereUniqueInput!
  data: EdificioUpdateInput!
}

input EdificioCreateInput {
  name: String
  comunidad: ComunidadRelateToOneForCreateInput
  instalaciones: InstalacionRelateToManyForCreateInput
  tipo: String
  admin: AdminRelateToOneForCreateInput
}

input InstalacionRelateToManyForCreateInput {
  create: [InstalacionCreateInput!]
  connect: [InstalacionWhereUniqueInput!]
}

type Elemento {
  id: ID!
  producto: Producto
  estado: String
  instalacion: Instalacion
  cantidad: Int
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
  group: String
}

input ElementoWhereUniqueInput {
  id: ID
}

input ElementoWhereInput {
  AND: [ElementoWhereInput!]
  OR: [ElementoWhereInput!]
  NOT: [ElementoWhereInput!]
  id: IDFilter
  producto: ProductoWhereInput
  estado: StringNullableFilter
  instalacion: InstalacionWhereInput
  cantidad: IntNullableFilter
  observaciones: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  group: StringNullableFilter
}

input ElementoOrderByInput {
  id: OrderDirection
  estado: OrderDirection
  cantidad: OrderDirection
  observaciones: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  group: OrderDirection
}

input ElementoUpdateInput {
  producto: ProductoRelateToOneForUpdateInput
  estado: String
  instalacion: InstalacionRelateToOneForUpdateInput
  cantidad: Int
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
  group: String
}

input ProductoRelateToOneForUpdateInput {
  create: ProductoCreateInput
  connect: ProductoWhereUniqueInput
  disconnect: Boolean
}

input InstalacionRelateToOneForUpdateInput {
  create: InstalacionCreateInput
  connect: InstalacionWhereUniqueInput
  disconnect: Boolean
}

input ElementoUpdateArgs {
  where: ElementoWhereUniqueInput!
  data: ElementoUpdateInput!
}

input ElementoCreateInput {
  producto: ProductoRelateToOneForCreateInput
  estado: String
  instalacion: InstalacionRelateToOneForCreateInput
  cantidad: Int
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
  group: String
}

input ProductoRelateToOneForCreateInput {
  create: ProductoCreateInput
  connect: ProductoWhereUniqueInput
}

input InstalacionRelateToOneForCreateInput {
  create: InstalacionCreateInput
  connect: InstalacionWhereUniqueInput
}

type Empresa {
  id: ID!
  name: String
  logo: String
  cif: String
}

input EmpresaWhereUniqueInput {
  id: ID
}

input EmpresaWhereInput {
  AND: [EmpresaWhereInput!]
  OR: [EmpresaWhereInput!]
  NOT: [EmpresaWhereInput!]
  id: IDFilter
  name: StringFilter
  logo: StringFilter
  cif: StringFilter
}

input EmpresaOrderByInput {
  id: OrderDirection
  name: OrderDirection
  logo: OrderDirection
  cif: OrderDirection
}

input EmpresaUpdateInput {
  name: String
  logo: String
  cif: String
}

input EmpresaUpdateArgs {
  where: EmpresaWhereUniqueInput!
  data: EmpresaUpdateInput!
}

input EmpresaCreateInput {
  name: String
  logo: String
  cif: String
}

type Imagen {
  id: ID!
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ImagenWhereUniqueInput {
  id: ID
}

input ImagenWhereInput {
  AND: [ImagenWhereInput!]
  OR: [ImagenWhereInput!]
  NOT: [ImagenWhereInput!]
  id: IDFilter
  archivo: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ImagenOrderByInput {
  id: OrderDirection
  archivo: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ImagenUpdateInput {
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ImagenUpdateArgs {
  where: ImagenWhereUniqueInput!
  data: ImagenUpdateInput!
}

input ImagenCreateInput {
  archivo: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Manual {
  id: ID!
  producto: Producto
  documento: Documento
  createdAt: DateTime
  updatedAt: DateTime
}

input ManualWhereUniqueInput {
  id: ID
}

input ManualWhereInput {
  AND: [ManualWhereInput!]
  OR: [ManualWhereInput!]
  NOT: [ManualWhereInput!]
  id: IDFilter
  producto: ProductoWhereInput
  documento: DocumentoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ManualOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ManualUpdateInput {
  producto: ProductoRelateToOneForUpdateInput
  documento: DocumentoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentoRelateToOneForUpdateInput {
  create: DocumentoCreateInput
  connect: DocumentoWhereUniqueInput
  disconnect: Boolean
}

input ManualUpdateArgs {
  where: ManualWhereUniqueInput!
  data: ManualUpdateInput!
}

input ManualCreateInput {
  producto: ProductoRelateToOneForCreateInput
  documento: DocumentoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentoRelateToOneForCreateInput {
  create: DocumentoCreateInput
  connect: DocumentoWhereUniqueInput
}

type Marca {
  id: ID!
  name: String
  categoria: Categoria
}

input MarcaWhereUniqueInput {
  id: ID
}

input MarcaWhereInput {
  AND: [MarcaWhereInput!]
  OR: [MarcaWhereInput!]
  NOT: [MarcaWhereInput!]
  id: IDFilter
  name: StringFilter
  categoria: CategoriaWhereInput
}

input MarcaOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MarcaUpdateInput {
  name: String
  categoria: CategoriaRelateToOneForUpdateInput
}

input CategoriaRelateToOneForUpdateInput {
  create: CategoriaCreateInput
  connect: CategoriaWhereUniqueInput
  disconnect: Boolean
}

input MarcaUpdateArgs {
  where: MarcaWhereUniqueInput!
  data: MarcaUpdateInput!
}

input MarcaCreateInput {
  name: String
  categoria: CategoriaRelateToOneForCreateInput
}

input CategoriaRelateToOneForCreateInput {
  create: CategoriaCreateInput
  connect: CategoriaWhereUniqueInput
}

type Instalacion {
  id: ID!
  tipo: String
  descripcion: String
  edificio: Edificio
  elementos(where: ElementoWhereInput! = {}, orderBy: [ElementoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElementoWhereUniqueInput): [Elemento!]
  elementosCount(where: ElementoWhereInput! = {}): Int
  comentarios(where: InstalacionCommentWhereInput! = {}, orderBy: [InstalacionCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstalacionCommentWhereUniqueInput): [InstalacionComment!]
  comentariosCount(where: InstalacionCommentWhereInput! = {}): Int
}

input InstalacionWhereUniqueInput {
  id: ID
}

input InstalacionWhereInput {
  AND: [InstalacionWhereInput!]
  OR: [InstalacionWhereInput!]
  NOT: [InstalacionWhereInput!]
  id: IDFilter
  tipo: StringNullableFilter
  descripcion: StringFilter
  edificio: EdificioWhereInput
  elementos: ElementoManyRelationFilter
  comentarios: InstalacionCommentManyRelationFilter
}

input ElementoManyRelationFilter {
  every: ElementoWhereInput
  some: ElementoWhereInput
  none: ElementoWhereInput
}

input InstalacionCommentManyRelationFilter {
  every: InstalacionCommentWhereInput
  some: InstalacionCommentWhereInput
  none: InstalacionCommentWhereInput
}

input InstalacionOrderByInput {
  id: OrderDirection
  tipo: OrderDirection
  descripcion: OrderDirection
}

input InstalacionUpdateInput {
  tipo: String
  descripcion: String
  edificio: EdificioRelateToOneForUpdateInput
  elementos: ElementoRelateToManyForUpdateInput
  comentarios: InstalacionCommentRelateToManyForUpdateInput
}

input ElementoRelateToManyForUpdateInput {
  disconnect: [ElementoWhereUniqueInput!]
  set: [ElementoWhereUniqueInput!]
  create: [ElementoCreateInput!]
  connect: [ElementoWhereUniqueInput!]
}

input InstalacionCommentRelateToManyForUpdateInput {
  disconnect: [InstalacionCommentWhereUniqueInput!]
  set: [InstalacionCommentWhereUniqueInput!]
  create: [InstalacionCommentCreateInput!]
  connect: [InstalacionCommentWhereUniqueInput!]
}

input InstalacionUpdateArgs {
  where: InstalacionWhereUniqueInput!
  data: InstalacionUpdateInput!
}

input InstalacionCreateInput {
  tipo: String
  descripcion: String
  edificio: EdificioRelateToOneForCreateInput
  elementos: ElementoRelateToManyForCreateInput
  comentarios: InstalacionCommentRelateToManyForCreateInput
}

input ElementoRelateToManyForCreateInput {
  create: [ElementoCreateInput!]
  connect: [ElementoWhereUniqueInput!]
}

input InstalacionCommentRelateToManyForCreateInput {
  create: [InstalacionCommentCreateInput!]
  connect: [InstalacionCommentWhereUniqueInput!]
}

type Contraincendio {
  id: ID!
  serial_number: String
  date_made: DateTime
  date_retimbrado: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  tecnico: User
  descripcion: String
  elemento: Elemento
}

input ContraincendioWhereUniqueInput {
  id: ID
}

input ContraincendioWhereInput {
  AND: [ContraincendioWhereInput!]
  OR: [ContraincendioWhereInput!]
  NOT: [ContraincendioWhereInput!]
  id: IDFilter
  serial_number: StringFilter
  date_made: DateTimeNullableFilter
  date_retimbrado: DateTimeNullableFilter
  date_last_revision: DateTimeNullableFilter
  date_next_revision: DateTimeNullableFilter
  tecnico: UserWhereInput
  descripcion: StringFilter
  elemento: ElementoWhereInput
}

input ContraincendioOrderByInput {
  id: OrderDirection
  serial_number: OrderDirection
  date_made: OrderDirection
  date_retimbrado: OrderDirection
  date_last_revision: OrderDirection
  date_next_revision: OrderDirection
  descripcion: OrderDirection
}

input ContraincendioUpdateInput {
  serial_number: String
  date_made: DateTime
  date_retimbrado: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  tecnico: UserRelateToOneForUpdateInput
  descripcion: String
  elemento: ElementoRelateToOneForUpdateInput
}

input ElementoRelateToOneForUpdateInput {
  create: ElementoCreateInput
  connect: ElementoWhereUniqueInput
  disconnect: Boolean
}

input ContraincendioUpdateArgs {
  where: ContraincendioWhereUniqueInput!
  data: ContraincendioUpdateInput!
}

input ContraincendioCreateInput {
  serial_number: String
  date_made: DateTime
  date_retimbrado: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  tecnico: UserRelateToOneForCreateInput
  descripcion: String
  elemento: ElementoRelateToOneForCreateInput
}

input ElementoRelateToOneForCreateInput {
  create: ElementoCreateInput
  connect: ElementoWhereUniqueInput
}

type Inst_Otro {
  id: ID!
  serial_number: String
  date_made: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  elemento: Elemento
  tecnico: User
}

input Inst_OtroWhereUniqueInput {
  id: ID
}

input Inst_OtroWhereInput {
  AND: [Inst_OtroWhereInput!]
  OR: [Inst_OtroWhereInput!]
  NOT: [Inst_OtroWhereInput!]
  id: IDFilter
  serial_number: StringFilter
  date_made: DateTimeNullableFilter
  date_last_revision: DateTimeNullableFilter
  date_next_revision: DateTimeNullableFilter
  elemento: ElementoWhereInput
  tecnico: UserWhereInput
}

input Inst_OtroOrderByInput {
  id: OrderDirection
  serial_number: OrderDirection
  date_made: OrderDirection
  date_last_revision: OrderDirection
  date_next_revision: OrderDirection
}

input Inst_OtroUpdateInput {
  serial_number: String
  date_made: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  elemento: ElementoRelateToOneForUpdateInput
  tecnico: UserRelateToOneForUpdateInput
}

input Inst_OtroUpdateArgs {
  where: Inst_OtroWhereUniqueInput!
  data: Inst_OtroUpdateInput!
}

input Inst_OtroCreateInput {
  serial_number: String
  date_made: DateTime
  date_last_revision: DateTime
  date_next_revision: DateTime
  elemento: ElementoRelateToOneForCreateInput
  tecnico: UserRelateToOneForCreateInput
}

type Reparacion {
  id: ID!
  date_repair: DateTime
  tecnico: User
  descripcion: String
  elemento: Elemento
}

input ReparacionWhereUniqueInput {
  id: ID
}

input ReparacionWhereInput {
  AND: [ReparacionWhereInput!]
  OR: [ReparacionWhereInput!]
  NOT: [ReparacionWhereInput!]
  id: IDFilter
  date_repair: DateTimeNullableFilter
  tecnico: UserWhereInput
  descripcion: StringFilter
  elemento: ElementoWhereInput
}

input ReparacionOrderByInput {
  id: OrderDirection
  date_repair: OrderDirection
  descripcion: OrderDirection
}

input ReparacionUpdateInput {
  date_repair: DateTime
  tecnico: UserRelateToOneForUpdateInput
  descripcion: String
  elemento: ElementoRelateToOneForUpdateInput
}

input ReparacionUpdateArgs {
  where: ReparacionWhereUniqueInput!
  data: ReparacionUpdateInput!
}

input ReparacionCreateInput {
  date_repair: DateTime
  tecnico: UserRelateToOneForCreateInput
  descripcion: String
  elemento: ElementoRelateToOneForCreateInput
}

type Producto {
  id: ID!
  ref: String
  descripcion: String
  categoria: Categoria
  subcategoria: Subcategoria
  marca: Marca
  precio: Int
  ean: String
  imagen: Imagen
  createdAt: DateTime
  updatedAt: DateTime
  label: String
}

input ProductoWhereUniqueInput {
  id: ID
}

input ProductoWhereInput {
  AND: [ProductoWhereInput!]
  OR: [ProductoWhereInput!]
  NOT: [ProductoWhereInput!]
  id: IDFilter
  ref: StringFilter
  descripcion: StringFilter
  categoria: CategoriaWhereInput
  subcategoria: SubcategoriaWhereInput
  marca: MarcaWhereInput
  precio: IntNullableFilter
  ean: StringFilter
  imagen: ImagenWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProductoOrderByInput {
  id: OrderDirection
  ref: OrderDirection
  descripcion: OrderDirection
  precio: OrderDirection
  ean: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductoUpdateInput {
  ref: String
  descripcion: String
  categoria: CategoriaRelateToOneForUpdateInput
  subcategoria: SubcategoriaRelateToOneForUpdateInput
  marca: MarcaRelateToOneForUpdateInput
  precio: Int
  ean: String
  imagen: ImagenRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoriaRelateToOneForUpdateInput {
  create: SubcategoriaCreateInput
  connect: SubcategoriaWhereUniqueInput
  disconnect: Boolean
}

input MarcaRelateToOneForUpdateInput {
  create: MarcaCreateInput
  connect: MarcaWhereUniqueInput
  disconnect: Boolean
}

input ImagenRelateToOneForUpdateInput {
  create: ImagenCreateInput
  connect: ImagenWhereUniqueInput
  disconnect: Boolean
}

input ProductoUpdateArgs {
  where: ProductoWhereUniqueInput!
  data: ProductoUpdateInput!
}

input ProductoCreateInput {
  ref: String
  descripcion: String
  categoria: CategoriaRelateToOneForCreateInput
  subcategoria: SubcategoriaRelateToOneForCreateInput
  marca: MarcaRelateToOneForCreateInput
  precio: Int
  ean: String
  imagen: ImagenRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoriaRelateToOneForCreateInput {
  create: SubcategoriaCreateInput
  connect: SubcategoriaWhereUniqueInput
}

input MarcaRelateToOneForCreateInput {
  create: MarcaCreateInput
  connect: MarcaWhereUniqueInput
}

input ImagenRelateToOneForCreateInput {
  create: ImagenCreateInput
  connect: ImagenWhereUniqueInput
}

type Rol {
  id: ID!
  name: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RolWhereUniqueInput {
  id: ID
}

input RolWhereInput {
  AND: [RolWhereInput!]
  OR: [RolWhereInput!]
  NOT: [RolWhereInput!]
  id: IDFilter
  name: StringFilter
  level: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  level: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  deletedAt: OrderDirection
}

input RolUpdateInput {
  name: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RolUpdateArgs {
  where: RolWhereUniqueInput!
  data: RolUpdateInput!
}

input RolCreateInput {
  name: String
  level: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Subcategoria {
  id: ID!
  name: String
  categoria: Categoria
}

input SubcategoriaWhereUniqueInput {
  id: ID
}

input SubcategoriaWhereInput {
  AND: [SubcategoriaWhereInput!]
  OR: [SubcategoriaWhereInput!]
  NOT: [SubcategoriaWhereInput!]
  id: IDFilter
  name: StringFilter
  categoria: CategoriaWhereInput
}

input SubcategoriaOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SubcategoriaUpdateInput {
  name: String
  categoria: CategoriaRelateToOneForUpdateInput
}

input SubcategoriaUpdateArgs {
  where: SubcategoriaWhereUniqueInput!
  data: SubcategoriaUpdateInput!
}

input SubcategoriaCreateInput {
  name: String
  categoria: CategoriaRelateToOneForCreateInput
}

type Telefonillo {
  id: ID!
  modelo: String
  abrep: String
  micro: String
  comun: String
  altavoz: String
  llamada: String
}

input TelefonilloWhereUniqueInput {
  id: ID
}

input TelefonilloWhereInput {
  AND: [TelefonilloWhereInput!]
  OR: [TelefonilloWhereInput!]
  NOT: [TelefonilloWhereInput!]
  id: IDFilter
  modelo: StringFilter
  abrep: StringFilter
  micro: StringFilter
  comun: StringFilter
  altavoz: StringFilter
  llamada: StringFilter
}

input TelefonilloOrderByInput {
  id: OrderDirection
  modelo: OrderDirection
  abrep: OrderDirection
  micro: OrderDirection
  comun: OrderDirection
  altavoz: OrderDirection
  llamada: OrderDirection
}

input TelefonilloUpdateInput {
  modelo: String
  abrep: String
  micro: String
  comun: String
  altavoz: String
  llamada: String
}

input TelefonilloUpdateArgs {
  where: TelefonilloWhereUniqueInput!
  data: TelefonilloUpdateInput!
}

input TelefonilloCreateInput {
  modelo: String
  abrep: String
  micro: String
  comun: String
  altavoz: String
  llamada: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  googleId: String
  photo: String
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  profile: Profile
  empresa: Empresa
  rol: Rol
  tecnicoNum: Int
  token: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
  googleId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  googleId: StringFilter
  photo: StringFilter
  lastLogin: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  profile: ProfileWhereInput
  empresa: EmpresaWhereInput
  rol: RolWhereInput
  tecnicoNum: IntNullableFilter
  token: StringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  googleId: OrderDirection
  photo: OrderDirection
  lastLogin: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  tecnicoNum: OrderDirection
  token: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  googleId: String
  photo: String
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileRelateToOneForUpdateInput
  empresa: EmpresaRelateToOneForUpdateInput
  rol: RolRelateToOneForUpdateInput
  tecnicoNum: Int
  token: String
}

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input EmpresaRelateToOneForUpdateInput {
  create: EmpresaCreateInput
  connect: EmpresaWhereUniqueInput
  disconnect: Boolean
}

input RolRelateToOneForUpdateInput {
  create: RolCreateInput
  connect: RolWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  googleId: String
  photo: String
  lastLogin: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileRelateToOneForCreateInput
  empresa: EmpresaRelateToOneForCreateInput
  rol: RolRelateToOneForCreateInput
  tecnicoNum: Int
  token: String
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

input EmpresaRelateToOneForCreateInput {
  create: EmpresaCreateInput
  connect: EmpresaWhereUniqueInput
}

input RolRelateToOneForCreateInput {
  create: RolCreateInput
  connect: RolWhereUniqueInput
}

type Aviso {
  id: ID!
  numero: String
  comunidad: Comunidad
  tecnico: User
  solucion: String
  observaciones: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoWhereUniqueInput {
  id: ID
}

input AvisoWhereInput {
  AND: [AvisoWhereInput!]
  OR: [AvisoWhereInput!]
  NOT: [AvisoWhereInput!]
  id: IDFilter
  numero: StringFilter
  comunidad: ComunidadWhereInput
  tecnico: UserWhereInput
  solucion: StringFilter
  observaciones: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AvisoOrderByInput {
  id: OrderDirection
  numero: OrderDirection
  solucion: OrderDirection
  observaciones: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AvisoUpdateInput {
  numero: String
  comunidad: ComunidadRelateToOneForUpdateInput
  tecnico: UserRelateToOneForUpdateInput
  solucion: String
  observaciones: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoUpdateArgs {
  where: AvisoWhereUniqueInput!
  data: AvisoUpdateInput!
}

input AvisoCreateInput {
  numero: String
  comunidad: ComunidadRelateToOneForCreateInput
  tecnico: UserRelateToOneForCreateInput
  solucion: String
  observaciones: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type History {
  id: ID!
  aviso: Aviso
  tecnico: User
  status: String
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HistoryWhereUniqueInput {
  id: ID
}

input HistoryWhereInput {
  AND: [HistoryWhereInput!]
  OR: [HistoryWhereInput!]
  NOT: [HistoryWhereInput!]
  id: IDFilter
  aviso: AvisoWhereInput
  tecnico: UserWhereInput
  status: StringNullableFilter
  observaciones: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HistoryOrderByInput {
  id: OrderDirection
  status: OrderDirection
  observaciones: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HistoryUpdateInput {
  aviso: AvisoRelateToOneForUpdateInput
  tecnico: UserRelateToOneForUpdateInput
  status: String
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoRelateToOneForUpdateInput {
  create: AvisoCreateInput
  connect: AvisoWhereUniqueInput
  disconnect: Boolean
}

input HistoryUpdateArgs {
  where: HistoryWhereUniqueInput!
  data: HistoryUpdateInput!
}

input HistoryCreateInput {
  aviso: AvisoRelateToOneForCreateInput
  tecnico: UserRelateToOneForCreateInput
  status: String
  observaciones: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoRelateToOneForCreateInput {
  create: AvisoCreateInput
  connect: AvisoWhereUniqueInput
}

type Adjunto {
  id: ID!
  aviso: Aviso
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AdjuntoWhereUniqueInput {
  id: ID
}

input AdjuntoWhereInput {
  AND: [AdjuntoWhereInput!]
  OR: [AdjuntoWhereInput!]
  NOT: [AdjuntoWhereInput!]
  id: IDFilter
  aviso: AvisoWhereInput
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AdjuntoOrderByInput {
  id: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AdjuntoUpdateInput {
  aviso: AvisoRelateToOneForUpdateInput
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AdjuntoUpdateArgs {
  where: AdjuntoWhereUniqueInput!
  data: AdjuntoUpdateInput!
}

input AdjuntoCreateInput {
  aviso: AvisoRelateToOneForCreateInput
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Profile {
  id: ID!
  user: User
  bio: String
  photo: String
  phone: String
  workPhone: String
}

input ProfileWhereUniqueInput {
  id: ID
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  user: UserWhereInput
  bio: StringFilter
  photo: StringFilter
  phone: StringFilter
  workPhone: StringFilter
}

input ProfileOrderByInput {
  id: OrderDirection
  bio: OrderDirection
  photo: OrderDirection
  phone: OrderDirection
  workPhone: OrderDirection
}

input ProfileUpdateInput {
  user: UserRelateToOneForUpdateInput
  bio: String
  photo: String
  phone: String
  workPhone: String
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  user: UserRelateToOneForCreateInput
  bio: String
  photo: String
  phone: String
  workPhone: String
}

type EdificioComment {
  id: ID!
  author: User
  edificio: Edificio
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EdificioCommentWhereUniqueInput {
  id: ID
}

input EdificioCommentWhereInput {
  AND: [EdificioCommentWhereInput!]
  OR: [EdificioCommentWhereInput!]
  NOT: [EdificioCommentWhereInput!]
  id: IDFilter
  author: UserWhereInput
  edificio: EdificioWhereInput
  comentario: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EdificioCommentOrderByInput {
  id: OrderDirection
  comentario: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EdificioCommentUpdateInput {
  author: UserRelateToOneForUpdateInput
  edificio: EdificioRelateToOneForUpdateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EdificioCommentUpdateArgs {
  where: EdificioCommentWhereUniqueInput!
  data: EdificioCommentUpdateInput!
}

input EdificioCommentCreateInput {
  author: UserRelateToOneForCreateInput
  edificio: EdificioRelateToOneForCreateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

type AvisoComment {
  id: ID!
  author: User
  aviso: Aviso
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoCommentWhereUniqueInput {
  id: ID
}

input AvisoCommentWhereInput {
  AND: [AvisoCommentWhereInput!]
  OR: [AvisoCommentWhereInput!]
  NOT: [AvisoCommentWhereInput!]
  id: IDFilter
  author: UserWhereInput
  aviso: AvisoWhereInput
  comentario: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AvisoCommentOrderByInput {
  id: OrderDirection
  comentario: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AvisoCommentUpdateInput {
  author: UserRelateToOneForUpdateInput
  aviso: AvisoRelateToOneForUpdateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AvisoCommentUpdateArgs {
  where: AvisoCommentWhereUniqueInput!
  data: AvisoCommentUpdateInput!
}

input AvisoCommentCreateInput {
  author: UserRelateToOneForCreateInput
  aviso: AvisoRelateToOneForCreateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ElementoComment {
  id: ID!
  author: User
  elemento: Elemento
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ElementoCommentWhereUniqueInput {
  id: ID
}

input ElementoCommentWhereInput {
  AND: [ElementoCommentWhereInput!]
  OR: [ElementoCommentWhereInput!]
  NOT: [ElementoCommentWhereInput!]
  id: IDFilter
  author: UserWhereInput
  elemento: ElementoWhereInput
  comentario: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ElementoCommentOrderByInput {
  id: OrderDirection
  comentario: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ElementoCommentUpdateInput {
  author: UserRelateToOneForUpdateInput
  elemento: ElementoRelateToOneForUpdateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ElementoCommentUpdateArgs {
  where: ElementoCommentWhereUniqueInput!
  data: ElementoCommentUpdateInput!
}

input ElementoCommentCreateInput {
  author: UserRelateToOneForCreateInput
  elemento: ElementoRelateToOneForCreateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

type InstalacionComment {
  id: ID!
  author: User
  instalacion: Instalacion
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InstalacionCommentWhereUniqueInput {
  id: ID
}

input InstalacionCommentWhereInput {
  AND: [InstalacionCommentWhereInput!]
  OR: [InstalacionCommentWhereInput!]
  NOT: [InstalacionCommentWhereInput!]
  id: IDFilter
  author: UserWhereInput
  instalacion: InstalacionWhereInput
  comentario: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input InstalacionCommentOrderByInput {
  id: OrderDirection
  comentario: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InstalacionCommentUpdateInput {
  author: UserRelateToOneForUpdateInput
  instalacion: InstalacionRelateToOneForUpdateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

input InstalacionCommentUpdateArgs {
  where: InstalacionCommentWhereUniqueInput!
  data: InstalacionCommentUpdateInput!
}

input InstalacionCommentCreateInput {
  author: UserRelateToOneForCreateInput
  instalacion: InstalacionRelateToOneForCreateInput
  comentario: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Subcription {
  id: ID!
  name: String
  limits: Int
  price: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcriptionWhereUniqueInput {
  id: ID
}

input SubcriptionWhereInput {
  AND: [SubcriptionWhereInput!]
  OR: [SubcriptionWhereInput!]
  NOT: [SubcriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  limits: IntNullableFilter
  price: IntNullableFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubcriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  limits: OrderDirection
  price: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubcriptionUpdateInput {
  name: String
  limits: Int
  price: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcriptionUpdateArgs {
  where: SubcriptionWhereUniqueInput!
  data: SubcriptionUpdateInput!
}

input SubcriptionCreateInput {
  name: String
  limits: Int
  price: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SubscriptionEmpresa {
  id: ID!
  empresa: Empresa
  subscription: Subcription
  expiration: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubscriptionEmpresaWhereUniqueInput {
  id: ID
}

input SubscriptionEmpresaWhereInput {
  AND: [SubscriptionEmpresaWhereInput!]
  OR: [SubscriptionEmpresaWhereInput!]
  NOT: [SubscriptionEmpresaWhereInput!]
  id: IDFilter
  empresa: EmpresaWhereInput
  subscription: SubcriptionWhereInput
  expiration: DateTimeNullableFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubscriptionEmpresaOrderByInput {
  id: OrderDirection
  expiration: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubscriptionEmpresaUpdateInput {
  empresa: EmpresaRelateToOneForUpdateInput
  subscription: SubcriptionRelateToOneForUpdateInput
  expiration: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcriptionRelateToOneForUpdateInput {
  create: SubcriptionCreateInput
  connect: SubcriptionWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionEmpresaUpdateArgs {
  where: SubscriptionEmpresaWhereUniqueInput!
  data: SubscriptionEmpresaUpdateInput!
}

input SubscriptionEmpresaCreateInput {
  empresa: EmpresaRelateToOneForCreateInput
  subscription: SubcriptionRelateToOneForCreateInput
  expiration: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcriptionRelateToOneForCreateInput {
  create: SubcriptionCreateInput
  connect: SubcriptionWhereUniqueInput
}

type Config {
  id: ID!
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  key: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  key: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConfigUpdateInput {
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput!
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createCategoria(data: CategoriaCreateInput!): Categoria
  createCategorias(data: [CategoriaCreateInput!]!): [Categoria]
  updateCategoria(where: CategoriaWhereUniqueInput!, data: CategoriaUpdateInput!): Categoria
  updateCategorias(data: [CategoriaUpdateArgs!]!): [Categoria]
  deleteCategoria(where: CategoriaWhereUniqueInput!): Categoria
  deleteCategorias(where: [CategoriaWhereUniqueInput!]!): [Categoria]
  createComunidad(data: ComunidadCreateInput!): Comunidad
  createComunidads(data: [ComunidadCreateInput!]!): [Comunidad]
  updateComunidad(where: ComunidadWhereUniqueInput!, data: ComunidadUpdateInput!): Comunidad
  updateComunidads(data: [ComunidadUpdateArgs!]!): [Comunidad]
  deleteComunidad(where: ComunidadWhereUniqueInput!): Comunidad
  deleteComunidads(where: [ComunidadWhereUniqueInput!]!): [Comunidad]
  createContacto(data: ContactoCreateInput!): Contacto
  createContactos(data: [ContactoCreateInput!]!): [Contacto]
  updateContacto(where: ContactoWhereUniqueInput!, data: ContactoUpdateInput!): Contacto
  updateContactos(data: [ContactoUpdateArgs!]!): [Contacto]
  deleteContacto(where: ContactoWhereUniqueInput!): Contacto
  deleteContactos(where: [ContactoWhereUniqueInput!]!): [Contacto]
  createDocumento(data: DocumentoCreateInput!): Documento
  createDocumentos(data: [DocumentoCreateInput!]!): [Documento]
  updateDocumento(where: DocumentoWhereUniqueInput!, data: DocumentoUpdateInput!): Documento
  updateDocumentos(data: [DocumentoUpdateArgs!]!): [Documento]
  deleteDocumento(where: DocumentoWhereUniqueInput!): Documento
  deleteDocumentos(where: [DocumentoWhereUniqueInput!]!): [Documento]
  createEdificio(data: EdificioCreateInput!): Edificio
  createEdificios(data: [EdificioCreateInput!]!): [Edificio]
  updateEdificio(where: EdificioWhereUniqueInput!, data: EdificioUpdateInput!): Edificio
  updateEdificios(data: [EdificioUpdateArgs!]!): [Edificio]
  deleteEdificio(where: EdificioWhereUniqueInput!): Edificio
  deleteEdificios(where: [EdificioWhereUniqueInput!]!): [Edificio]
  createElemento(data: ElementoCreateInput!): Elemento
  createElementos(data: [ElementoCreateInput!]!): [Elemento]
  updateElemento(where: ElementoWhereUniqueInput!, data: ElementoUpdateInput!): Elemento
  updateElementos(data: [ElementoUpdateArgs!]!): [Elemento]
  deleteElemento(where: ElementoWhereUniqueInput!): Elemento
  deleteElementos(where: [ElementoWhereUniqueInput!]!): [Elemento]
  createEmpresa(data: EmpresaCreateInput!): Empresa
  createEmpresas(data: [EmpresaCreateInput!]!): [Empresa]
  updateEmpresa(where: EmpresaWhereUniqueInput!, data: EmpresaUpdateInput!): Empresa
  updateEmpresas(data: [EmpresaUpdateArgs!]!): [Empresa]
  deleteEmpresa(where: EmpresaWhereUniqueInput!): Empresa
  deleteEmpresas(where: [EmpresaWhereUniqueInput!]!): [Empresa]
  createImagen(data: ImagenCreateInput!): Imagen
  createImagens(data: [ImagenCreateInput!]!): [Imagen]
  updateImagen(where: ImagenWhereUniqueInput!, data: ImagenUpdateInput!): Imagen
  updateImagens(data: [ImagenUpdateArgs!]!): [Imagen]
  deleteImagen(where: ImagenWhereUniqueInput!): Imagen
  deleteImagens(where: [ImagenWhereUniqueInput!]!): [Imagen]
  createManual(data: ManualCreateInput!): Manual
  createManuals(data: [ManualCreateInput!]!): [Manual]
  updateManual(where: ManualWhereUniqueInput!, data: ManualUpdateInput!): Manual
  updateManuals(data: [ManualUpdateArgs!]!): [Manual]
  deleteManual(where: ManualWhereUniqueInput!): Manual
  deleteManuals(where: [ManualWhereUniqueInput!]!): [Manual]
  createMarca(data: MarcaCreateInput!): Marca
  createMarcas(data: [MarcaCreateInput!]!): [Marca]
  updateMarca(where: MarcaWhereUniqueInput!, data: MarcaUpdateInput!): Marca
  updateMarcas(data: [MarcaUpdateArgs!]!): [Marca]
  deleteMarca(where: MarcaWhereUniqueInput!): Marca
  deleteMarcas(where: [MarcaWhereUniqueInput!]!): [Marca]
  createInstalacion(data: InstalacionCreateInput!): Instalacion
  createInstalacions(data: [InstalacionCreateInput!]!): [Instalacion]
  updateInstalacion(where: InstalacionWhereUniqueInput!, data: InstalacionUpdateInput!): Instalacion
  updateInstalacions(data: [InstalacionUpdateArgs!]!): [Instalacion]
  deleteInstalacion(where: InstalacionWhereUniqueInput!): Instalacion
  deleteInstalacions(where: [InstalacionWhereUniqueInput!]!): [Instalacion]
  createContraincendio(data: ContraincendioCreateInput!): Contraincendio
  createContraincendios(data: [ContraincendioCreateInput!]!): [Contraincendio]
  updateContraincendio(where: ContraincendioWhereUniqueInput!, data: ContraincendioUpdateInput!): Contraincendio
  updateContraincendios(data: [ContraincendioUpdateArgs!]!): [Contraincendio]
  deleteContraincendio(where: ContraincendioWhereUniqueInput!): Contraincendio
  deleteContraincendios(where: [ContraincendioWhereUniqueInput!]!): [Contraincendio]
  createInst_Otro(data: Inst_OtroCreateInput!): Inst_Otro
  createInstOtros(data: [Inst_OtroCreateInput!]!): [Inst_Otro]
  updateInst_Otro(where: Inst_OtroWhereUniqueInput!, data: Inst_OtroUpdateInput!): Inst_Otro
  updateInstOtros(data: [Inst_OtroUpdateArgs!]!): [Inst_Otro]
  deleteInst_Otro(where: Inst_OtroWhereUniqueInput!): Inst_Otro
  deleteInstOtros(where: [Inst_OtroWhereUniqueInput!]!): [Inst_Otro]
  createReparacion(data: ReparacionCreateInput!): Reparacion
  createReparacions(data: [ReparacionCreateInput!]!): [Reparacion]
  updateReparacion(where: ReparacionWhereUniqueInput!, data: ReparacionUpdateInput!): Reparacion
  updateReparacions(data: [ReparacionUpdateArgs!]!): [Reparacion]
  deleteReparacion(where: ReparacionWhereUniqueInput!): Reparacion
  deleteReparacions(where: [ReparacionWhereUniqueInput!]!): [Reparacion]
  createProducto(data: ProductoCreateInput!): Producto
  createProductos(data: [ProductoCreateInput!]!): [Producto]
  updateProducto(where: ProductoWhereUniqueInput!, data: ProductoUpdateInput!): Producto
  updateProductos(data: [ProductoUpdateArgs!]!): [Producto]
  deleteProducto(where: ProductoWhereUniqueInput!): Producto
  deleteProductos(where: [ProductoWhereUniqueInput!]!): [Producto]
  createRol(data: RolCreateInput!): Rol
  createRols(data: [RolCreateInput!]!): [Rol]
  updateRol(where: RolWhereUniqueInput!, data: RolUpdateInput!): Rol
  updateRols(data: [RolUpdateArgs!]!): [Rol]
  deleteRol(where: RolWhereUniqueInput!): Rol
  deleteRols(where: [RolWhereUniqueInput!]!): [Rol]
  createSubcategoria(data: SubcategoriaCreateInput!): Subcategoria
  createSubcategorias(data: [SubcategoriaCreateInput!]!): [Subcategoria]
  updateSubcategoria(where: SubcategoriaWhereUniqueInput!, data: SubcategoriaUpdateInput!): Subcategoria
  updateSubcategorias(data: [SubcategoriaUpdateArgs!]!): [Subcategoria]
  deleteSubcategoria(where: SubcategoriaWhereUniqueInput!): Subcategoria
  deleteSubcategorias(where: [SubcategoriaWhereUniqueInput!]!): [Subcategoria]
  createTelefonillo(data: TelefonilloCreateInput!): Telefonillo
  createTelefonillos(data: [TelefonilloCreateInput!]!): [Telefonillo]
  updateTelefonillo(where: TelefonilloWhereUniqueInput!, data: TelefonilloUpdateInput!): Telefonillo
  updateTelefonillos(data: [TelefonilloUpdateArgs!]!): [Telefonillo]
  deleteTelefonillo(where: TelefonilloWhereUniqueInput!): Telefonillo
  deleteTelefonillos(where: [TelefonilloWhereUniqueInput!]!): [Telefonillo]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAviso(data: AvisoCreateInput!): Aviso
  createAvisos(data: [AvisoCreateInput!]!): [Aviso]
  updateAviso(where: AvisoWhereUniqueInput!, data: AvisoUpdateInput!): Aviso
  updateAvisos(data: [AvisoUpdateArgs!]!): [Aviso]
  deleteAviso(where: AvisoWhereUniqueInput!): Aviso
  deleteAvisos(where: [AvisoWhereUniqueInput!]!): [Aviso]
  createHistory(data: HistoryCreateInput!): History
  createHistories(data: [HistoryCreateInput!]!): [History]
  updateHistory(where: HistoryWhereUniqueInput!, data: HistoryUpdateInput!): History
  updateHistories(data: [HistoryUpdateArgs!]!): [History]
  deleteHistory(where: HistoryWhereUniqueInput!): History
  deleteHistories(where: [HistoryWhereUniqueInput!]!): [History]
  createAdjunto(data: AdjuntoCreateInput!): Adjunto
  createAdjuntos(data: [AdjuntoCreateInput!]!): [Adjunto]
  updateAdjunto(where: AdjuntoWhereUniqueInput!, data: AdjuntoUpdateInput!): Adjunto
  updateAdjuntos(data: [AdjuntoUpdateArgs!]!): [Adjunto]
  deleteAdjunto(where: AdjuntoWhereUniqueInput!): Adjunto
  deleteAdjuntos(where: [AdjuntoWhereUniqueInput!]!): [Adjunto]
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createEdificioComment(data: EdificioCommentCreateInput!): EdificioComment
  createEdificioComments(data: [EdificioCommentCreateInput!]!): [EdificioComment]
  updateEdificioComment(where: EdificioCommentWhereUniqueInput!, data: EdificioCommentUpdateInput!): EdificioComment
  updateEdificioComments(data: [EdificioCommentUpdateArgs!]!): [EdificioComment]
  deleteEdificioComment(where: EdificioCommentWhereUniqueInput!): EdificioComment
  deleteEdificioComments(where: [EdificioCommentWhereUniqueInput!]!): [EdificioComment]
  createAvisoComment(data: AvisoCommentCreateInput!): AvisoComment
  createAvisoComments(data: [AvisoCommentCreateInput!]!): [AvisoComment]
  updateAvisoComment(where: AvisoCommentWhereUniqueInput!, data: AvisoCommentUpdateInput!): AvisoComment
  updateAvisoComments(data: [AvisoCommentUpdateArgs!]!): [AvisoComment]
  deleteAvisoComment(where: AvisoCommentWhereUniqueInput!): AvisoComment
  deleteAvisoComments(where: [AvisoCommentWhereUniqueInput!]!): [AvisoComment]
  createElementoComment(data: ElementoCommentCreateInput!): ElementoComment
  createElementoComments(data: [ElementoCommentCreateInput!]!): [ElementoComment]
  updateElementoComment(where: ElementoCommentWhereUniqueInput!, data: ElementoCommentUpdateInput!): ElementoComment
  updateElementoComments(data: [ElementoCommentUpdateArgs!]!): [ElementoComment]
  deleteElementoComment(where: ElementoCommentWhereUniqueInput!): ElementoComment
  deleteElementoComments(where: [ElementoCommentWhereUniqueInput!]!): [ElementoComment]
  createInstalacionComment(data: InstalacionCommentCreateInput!): InstalacionComment
  createInstalacionComments(data: [InstalacionCommentCreateInput!]!): [InstalacionComment]
  updateInstalacionComment(where: InstalacionCommentWhereUniqueInput!, data: InstalacionCommentUpdateInput!): InstalacionComment
  updateInstalacionComments(data: [InstalacionCommentUpdateArgs!]!): [InstalacionComment]
  deleteInstalacionComment(where: InstalacionCommentWhereUniqueInput!): InstalacionComment
  deleteInstalacionComments(where: [InstalacionCommentWhereUniqueInput!]!): [InstalacionComment]
  createSubcription(data: SubcriptionCreateInput!): Subcription
  createSubcriptions(data: [SubcriptionCreateInput!]!): [Subcription]
  updateSubcription(where: SubcriptionWhereUniqueInput!, data: SubcriptionUpdateInput!): Subcription
  updateSubcriptions(data: [SubcriptionUpdateArgs!]!): [Subcription]
  deleteSubcription(where: SubcriptionWhereUniqueInput!): Subcription
  deleteSubcriptions(where: [SubcriptionWhereUniqueInput!]!): [Subcription]
  createSubscriptionEmpresa(data: SubscriptionEmpresaCreateInput!): SubscriptionEmpresa
  createSubscriptionEmpresas(data: [SubscriptionEmpresaCreateInput!]!): [SubscriptionEmpresa]
  updateSubscriptionEmpresa(where: SubscriptionEmpresaWhereUniqueInput!, data: SubscriptionEmpresaUpdateInput!): SubscriptionEmpresa
  updateSubscriptionEmpresas(data: [SubscriptionEmpresaUpdateArgs!]!): [SubscriptionEmpresa]
  deleteSubscriptionEmpresa(where: SubscriptionEmpresaWhereUniqueInput!): SubscriptionEmpresa
  deleteSubscriptionEmpresas(where: [SubscriptionEmpresaWhereUniqueInput!]!): [SubscriptionEmpresa]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput!, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput!): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  adminsCount(where: AdminWhereInput! = {}): Int
  categoria(where: CategoriaWhereUniqueInput!): Categoria
  categorias(where: CategoriaWhereInput! = {}, orderBy: [CategoriaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoriaWhereUniqueInput): [Categoria!]
  categoriasCount(where: CategoriaWhereInput! = {}): Int
  comunidad(where: ComunidadWhereUniqueInput!): Comunidad
  comunidads(where: ComunidadWhereInput! = {}, orderBy: [ComunidadOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComunidadWhereUniqueInput): [Comunidad!]
  comunidadsCount(where: ComunidadWhereInput! = {}): Int
  contacto(where: ContactoWhereUniqueInput!): Contacto
  contactos(where: ContactoWhereInput! = {}, orderBy: [ContactoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactoWhereUniqueInput): [Contacto!]
  contactosCount(where: ContactoWhereInput! = {}): Int
  documento(where: DocumentoWhereUniqueInput!): Documento
  documentos(where: DocumentoWhereInput! = {}, orderBy: [DocumentoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentoWhereUniqueInput): [Documento!]
  documentosCount(where: DocumentoWhereInput! = {}): Int
  edificio(where: EdificioWhereUniqueInput!): Edificio
  edificios(where: EdificioWhereInput! = {}, orderBy: [EdificioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EdificioWhereUniqueInput): [Edificio!]
  edificiosCount(where: EdificioWhereInput! = {}): Int
  elemento(where: ElementoWhereUniqueInput!): Elemento
  elementos(where: ElementoWhereInput! = {}, orderBy: [ElementoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElementoWhereUniqueInput): [Elemento!]
  elementosCount(where: ElementoWhereInput! = {}): Int
  empresa(where: EmpresaWhereUniqueInput!): Empresa
  empresas(where: EmpresaWhereInput! = {}, orderBy: [EmpresaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmpresaWhereUniqueInput): [Empresa!]
  empresasCount(where: EmpresaWhereInput! = {}): Int
  imagen(where: ImagenWhereUniqueInput!): Imagen
  imagens(where: ImagenWhereInput! = {}, orderBy: [ImagenOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImagenWhereUniqueInput): [Imagen!]
  imagensCount(where: ImagenWhereInput! = {}): Int
  manual(where: ManualWhereUniqueInput!): Manual
  manuals(where: ManualWhereInput! = {}, orderBy: [ManualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ManualWhereUniqueInput): [Manual!]
  manualsCount(where: ManualWhereInput! = {}): Int
  marca(where: MarcaWhereUniqueInput!): Marca
  marcas(where: MarcaWhereInput! = {}, orderBy: [MarcaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MarcaWhereUniqueInput): [Marca!]
  marcasCount(where: MarcaWhereInput! = {}): Int
  instalacion(where: InstalacionWhereUniqueInput!): Instalacion
  instalacions(where: InstalacionWhereInput! = {}, orderBy: [InstalacionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstalacionWhereUniqueInput): [Instalacion!]
  instalacionsCount(where: InstalacionWhereInput! = {}): Int
  contraincendio(where: ContraincendioWhereUniqueInput!): Contraincendio
  contraincendios(where: ContraincendioWhereInput! = {}, orderBy: [ContraincendioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContraincendioWhereUniqueInput): [Contraincendio!]
  contraincendiosCount(where: ContraincendioWhereInput! = {}): Int
  inst_Otro(where: Inst_OtroWhereUniqueInput!): Inst_Otro
  instOtros(where: Inst_OtroWhereInput! = {}, orderBy: [Inst_OtroOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: Inst_OtroWhereUniqueInput): [Inst_Otro!]
  instOtrosCount(where: Inst_OtroWhereInput! = {}): Int
  reparacion(where: ReparacionWhereUniqueInput!): Reparacion
  reparacions(where: ReparacionWhereInput! = {}, orderBy: [ReparacionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReparacionWhereUniqueInput): [Reparacion!]
  reparacionsCount(where: ReparacionWhereInput! = {}): Int
  producto(where: ProductoWhereUniqueInput!): Producto
  productos(where: ProductoWhereInput! = {}, orderBy: [ProductoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductoWhereUniqueInput): [Producto!]
  productosCount(where: ProductoWhereInput! = {}): Int
  rol(where: RolWhereUniqueInput!): Rol
  rols(where: RolWhereInput! = {}, orderBy: [RolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RolWhereUniqueInput): [Rol!]
  rolsCount(where: RolWhereInput! = {}): Int
  subcategoria(where: SubcategoriaWhereUniqueInput!): Subcategoria
  subcategorias(where: SubcategoriaWhereInput! = {}, orderBy: [SubcategoriaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoriaWhereUniqueInput): [Subcategoria!]
  subcategoriasCount(where: SubcategoriaWhereInput! = {}): Int
  telefonillo(where: TelefonilloWhereUniqueInput!): Telefonillo
  telefonillos(where: TelefonilloWhereInput! = {}, orderBy: [TelefonilloOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TelefonilloWhereUniqueInput): [Telefonillo!]
  telefonillosCount(where: TelefonilloWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  aviso(where: AvisoWhereUniqueInput!): Aviso
  avisos(where: AvisoWhereInput! = {}, orderBy: [AvisoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvisoWhereUniqueInput): [Aviso!]
  avisosCount(where: AvisoWhereInput! = {}): Int
  history(where: HistoryWhereUniqueInput!): History
  histories(where: HistoryWhereInput! = {}, orderBy: [HistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HistoryWhereUniqueInput): [History!]
  historiesCount(where: HistoryWhereInput! = {}): Int
  adjunto(where: AdjuntoWhereUniqueInput!): Adjunto
  adjuntos(where: AdjuntoWhereInput! = {}, orderBy: [AdjuntoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdjuntoWhereUniqueInput): [Adjunto!]
  adjuntosCount(where: AdjuntoWhereInput! = {}): Int
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProfileWhereUniqueInput): [Profile!]
  profilesCount(where: ProfileWhereInput! = {}): Int
  edificioComment(where: EdificioCommentWhereUniqueInput!): EdificioComment
  edificioComments(where: EdificioCommentWhereInput! = {}, orderBy: [EdificioCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EdificioCommentWhereUniqueInput): [EdificioComment!]
  edificioCommentsCount(where: EdificioCommentWhereInput! = {}): Int
  avisoComment(where: AvisoCommentWhereUniqueInput!): AvisoComment
  avisoComments(where: AvisoCommentWhereInput! = {}, orderBy: [AvisoCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AvisoCommentWhereUniqueInput): [AvisoComment!]
  avisoCommentsCount(where: AvisoCommentWhereInput! = {}): Int
  elementoComment(where: ElementoCommentWhereUniqueInput!): ElementoComment
  elementoComments(where: ElementoCommentWhereInput! = {}, orderBy: [ElementoCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElementoCommentWhereUniqueInput): [ElementoComment!]
  elementoCommentsCount(where: ElementoCommentWhereInput! = {}): Int
  instalacionComment(where: InstalacionCommentWhereUniqueInput!): InstalacionComment
  instalacionComments(where: InstalacionCommentWhereInput! = {}, orderBy: [InstalacionCommentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstalacionCommentWhereUniqueInput): [InstalacionComment!]
  instalacionCommentsCount(where: InstalacionCommentWhereInput! = {}): Int
  subcription(where: SubcriptionWhereUniqueInput!): Subcription
  subcriptions(where: SubcriptionWhereInput! = {}, orderBy: [SubcriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcriptionWhereUniqueInput): [Subcription!]
  subcriptionsCount(where: SubcriptionWhereInput! = {}): Int
  subscriptionEmpresa(where: SubscriptionEmpresaWhereUniqueInput!): SubscriptionEmpresa
  subscriptionEmpresas(where: SubscriptionEmpresaWhereInput! = {}, orderBy: [SubscriptionEmpresaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionEmpresaWhereUniqueInput): [SubscriptionEmpresa!]
  subscriptionEmpresasCount(where: SubscriptionEmpresaWhereInput! = {}): Int
  config(where: ConfigWhereUniqueInput!): Config
  configs(where: ConfigWhereInput! = {}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  configsCount(where: ConfigWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}


================================================
File: schema.prisma
================================================
// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/myprisma"
}

model Admin {
  id                   String      @id @default(cuid())
  name                 String      @default("")
  agente               Int?
  from_Comunidad_admin Comunidad[] @relation("Comunidad_admin")
  from_Edificio_admin  Edificio[]  @relation("Edificio_admin")
}

model Categoria {
  id                          String         @id @default(cuid())
  name                        String         @default("")
  from_Marca_categoria        Marca[]        @relation("Marca_categoria")
  from_Producto_categoria     Producto[]     @relation("Producto_categoria")
  from_Subcategoria_categoria Subcategoria[] @relation("Subcategoria_categoria")
}

model Comunidad {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  direccion               String     @default("")
  cp                      Int?
  admin                   Admin?     @relation("Comunidad_admin", fields: [adminId], references: [id])
  adminId                 String?    @map("admin")
  cif                     String     @default("")
  author                  User?      @relation("Comunidad_author", fields: [authorId], references: [id])
  authorId                String?    @map("author")
  createdAt               DateTime?  @default(now())
  updatedAt               DateTime?  @default(now())
  edificios               Edificio[] @relation("Edificio_comunidad")
  from_Contacto_comunidad Contacto[] @relation("Contacto_comunidad")
  from_Aviso_comunidad    Aviso[]    @relation("Aviso_comunidad")

  @@index([adminId])
  @@index([authorId])
}

model Contacto {
  id          String     @id @default(cuid())
  name        String     @default("")
  telefono    String     @default("")
  piso        String     @default("")
  edificio    Edificio?  @relation("Contacto_edificio", fields: [edificioId], references: [id])
  edificioId  String?    @map("edificio")
  comunidad   Comunidad? @relation("Contacto_comunidad", fields: [comunidadId], references: [id])
  comunidadId String?    @map("comunidad")
  tipo        String?    @default("vecino")

  @@index([edificioId])
  @@index([comunidadId])
}

model Documento {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  archivo               String    @default("")
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @default(now())
  from_Manual_documento Manual[]  @relation("Manual_documento")
}

model Edificio {
  id                            String            @id @default(cuid())
  name                          String            @default("")
  comunidad                     Comunidad?        @relation("Edificio_comunidad", fields: [comunidadId], references: [id])
  comunidadId                   String?           @map("comunidad")
  instalaciones                 Instalacion[]     @relation("Instalacion_edificio")
  tipo                          String?           @default("bloque")
  admin                         Admin?            @relation("Edificio_admin", fields: [adminId], references: [id])
  adminId                       String?           @map("admin")
  from_Contacto_edificio        Contacto[]        @relation("Contacto_edificio")
  from_EdificioComment_edificio EdificioComment[] @relation("EdificioComment_edificio")

  @@index([comunidadId])
  @@index([adminId])
}

model Elemento {
  id                            String            @id @default(cuid())
  producto                      Producto?         @relation("Elemento_producto", fields: [productoId], references: [id])
  productoId                    String?           @map("producto")
  estado                        String?           @default("ok")
  instalacion                   Instalacion?      @relation("Elemento_instalacion", fields: [instalacionId], references: [id])
  instalacionId                 String?           @map("instalacion")
  cantidad                      Int?              @default(1)
  observaciones                 String            @default("")
  createdAt                     DateTime?         @default(now())
  updatedAt                     DateTime?         @default(now())
  group                         String?           @default("otros")
  from_Contraincendio_elemento  Contraincendio[]  @relation("Contraincendio_elemento")
  from_Inst_Otro_elemento       Inst_Otro[]       @relation("Inst_Otro_elemento")
  from_Reparacion_elemento      Reparacion[]      @relation("Reparacion_elemento")
  from_ElementoComment_elemento ElementoComment[] @relation("ElementoComment_elemento")

  @@index([productoId])
  @@index([instalacionId])
}

model Empresa {
  id                               String                @id @default(cuid())
  name                             String                @default("")
  logo                             String                @default("")
  cif                              String                @default("")
  from_User_empresa                User[]                @relation("User_empresa")
  from_SubscriptionEmpresa_empresa SubscriptionEmpresa[] @relation("SubscriptionEmpresa_empresa")
}

model Imagen {
  id                   String     @id @default(cuid())
  archivo              String     @default("")
  createdAt            DateTime?  @default(now())
  updatedAt            DateTime?  @default(now())
  from_Producto_imagen Producto[] @relation("Producto_imagen")
}

model Manual {
  id          String     @id @default(cuid())
  producto    Producto?  @relation("Manual_producto", fields: [productoId], references: [id])
  productoId  String?    @map("producto")
  documento   Documento? @relation("Manual_documento", fields: [documentoId], references: [id])
  documentoId String?    @map("documento")
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())

  @@index([productoId])
  @@index([documentoId])
}

model Marca {
  id                  String     @id @default(cuid())
  name                String     @default("")
  categoria           Categoria? @relation("Marca_categoria", fields: [categoriaId], references: [id])
  categoriaId         String?    @map("categoria")
  from_Producto_marca Producto[] @relation("Producto_marca")

  @@index([categoriaId])
}

model Instalacion {
  id          String               @id @default(cuid())
  tipo        String?              @default("portero")
  descripcion String               @default("")
  edificio    Edificio?            @relation("Instalacion_edificio", fields: [edificioId], references: [id])
  edificioId  String?              @map("edificio")
  elementos   Elemento[]           @relation("Elemento_instalacion")
  comentarios InstalacionComment[] @relation("InstalacionComment_instalacion")

  @@index([edificioId])
}

model Contraincendio {
  id                 String    @id @default(cuid())
  serial_number      String    @default("")
  date_made          DateTime?
  date_retimbrado    DateTime?
  date_last_revision DateTime?
  date_next_revision DateTime?
  tecnico            User?     @relation("Contraincendio_tecnico", fields: [tecnicoId], references: [id])
  tecnicoId          String?   @map("tecnico")
  descripcion        String    @default("")
  elemento           Elemento? @relation("Contraincendio_elemento", fields: [elementoId], references: [id])
  elementoId         String?   @map("elemento")

  @@index([tecnicoId])
  @@index([elementoId])
}

model Inst_Otro {
  id                 String    @id @default(cuid())
  serial_number      String    @default("")
  date_made          DateTime?
  date_last_revision DateTime?
  date_next_revision DateTime?
  elemento           Elemento? @relation("Inst_Otro_elemento", fields: [elementoId], references: [id])
  elementoId         String?   @map("elemento")
  tecnico            User?     @relation("Inst_Otro_tecnico", fields: [tecnicoId], references: [id])
  tecnicoId          String?   @map("tecnico")

  @@index([elementoId])
  @@index([tecnicoId])
}

model Reparacion {
  id          String    @id @default(cuid())
  date_repair DateTime?
  tecnico     User?     @relation("Reparacion_tecnico", fields: [tecnicoId], references: [id])
  tecnicoId   String?   @map("tecnico")
  descripcion String    @default("")
  elemento    Elemento? @relation("Reparacion_elemento", fields: [elementoId], references: [id])
  elementoId  String?   @map("elemento")

  @@index([tecnicoId])
  @@index([elementoId])
}

model Producto {
  id                     String        @id @default(cuid())
  ref                    String        @default("")
  descripcion            String        @default("")
  categoria              Categoria?    @relation("Producto_categoria", fields: [categoriaId], references: [id])
  categoriaId            String?       @map("categoria")
  subcategoria           Subcategoria? @relation("Producto_subcategoria", fields: [subcategoriaId], references: [id])
  subcategoriaId         String?       @map("subcategoria")
  marca                  Marca?        @relation("Producto_marca", fields: [marcaId], references: [id])
  marcaId                String?       @map("marca")
  precio                 Int?
  ean                    String        @default("")
  imagen                 Imagen?       @relation("Producto_imagen", fields: [imagenId], references: [id])
  imagenId               String?       @map("imagen")
  createdAt              DateTime?     @default(now())
  updatedAt              DateTime?     @default(now())
  from_Elemento_producto Elemento[]    @relation("Elemento_producto")
  from_Manual_producto   Manual[]      @relation("Manual_producto")

  @@index([categoriaId])
  @@index([subcategoriaId])
  @@index([marcaId])
  @@index([imagenId])
}

model Rol {
  id        String    @id @default(cuid())
  name      String    @default("")
  level     Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime?
  users     User[]    @relation("User_rol")
}

model Subcategoria {
  id                         String     @id @default(cuid())
  name                       String     @default("")
  categoria                  Categoria? @relation("Subcategoria_categoria", fields: [categoriaId], references: [id])
  categoriaId                String?    @map("categoria")
  from_Producto_subcategoria Producto[] @relation("Producto_subcategoria")

  @@index([categoriaId])
}

model Telefonillo {
  id      String @id @default(cuid())
  modelo  String @default("")
  abrep   String @default("")
  micro   String @default("")
  comun   String @default("")
  altavoz String @default("")
  llamada String @default("")
}

model User {
  id                             String               @id @default(cuid())
  name                           String               @default("")
  email                          String               @unique @default("")
  password                       String?
  googleId                       String               @unique @default("")
  photo                          String               @default("")
  lastLogin                      DateTime?
  createdAt                      DateTime?            @default(now())
  updatedAt                      DateTime?            @default(now())
  profile                        Profile?             @relation("Profile_user")
  empresa                        Empresa?             @relation("User_empresa", fields: [empresaId], references: [id])
  empresaId                      String?              @map("empresa")
  rol                            Rol?                 @relation("User_rol", fields: [rolId], references: [id])
  rolId                          String?              @map("rol")
  tecnicoNum                     Int?
  token                          String               @default("")
  from_Comunidad_author          Comunidad[]          @relation("Comunidad_author")
  from_Contraincendio_tecnico    Contraincendio[]     @relation("Contraincendio_tecnico")
  from_Inst_Otro_tecnico         Inst_Otro[]          @relation("Inst_Otro_tecnico")
  from_Reparacion_tecnico        Reparacion[]         @relation("Reparacion_tecnico")
  from_Aviso_tecnico             Aviso[]              @relation("Aviso_tecnico")
  from_History_tecnico           History[]            @relation("History_tecnico")
  from_EdificioComment_author    EdificioComment[]    @relation("EdificioComment_author")
  from_AvisoComment_author       AvisoComment[]       @relation("AvisoComment_author")
  from_ElementoComment_author    ElementoComment[]    @relation("ElementoComment_author")
  from_InstalacionComment_author InstalacionComment[] @relation("InstalacionComment_author")

  @@index([empresaId])
  @@index([rolId])
}

model Aviso {
  id                      String         @id @default(cuid())
  numero                  String         @default("")
  comunidad               Comunidad?     @relation("Aviso_comunidad", fields: [comunidadId], references: [id])
  comunidadId             String?        @map("comunidad")
  tecnico                 User?          @relation("Aviso_tecnico", fields: [tecnicoId], references: [id])
  tecnicoId               String?        @map("tecnico")
  solucion                String         @default("")
  observaciones           String         @default("")
  status                  String?        @default("Pendiente")
  createdAt               DateTime?      @default(now())
  updatedAt               DateTime?      @default(now())
  from_History_aviso      History[]      @relation("History_aviso")
  from_Adjunto_aviso      Adjunto[]      @relation("Adjunto_aviso")
  from_AvisoComment_aviso AvisoComment[] @relation("AvisoComment_aviso")

  @@index([comunidadId])
  @@index([tecnicoId])
}

model History {
  id            String    @id @default(cuid())
  aviso         Aviso?    @relation("History_aviso", fields: [avisoId], references: [id])
  avisoId       String?   @map("aviso")
  tecnico       User?     @relation("History_tecnico", fields: [tecnicoId], references: [id])
  tecnicoId     String?   @map("tecnico")
  status        String?   @default("Pendiente")
  observaciones String    @default("")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now())

  @@index([avisoId])
  @@index([tecnicoId])
}

model Adjunto {
  id        String    @id @default(cuid())
  aviso     Aviso?    @relation("Adjunto_aviso", fields: [avisoId], references: [id])
  avisoId   String?   @map("aviso")
  url       String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@index([avisoId])
}

model Profile {
  id        String  @id @default(cuid())
  user      User?   @relation("Profile_user", fields: [userId], references: [id])
  userId    String? @unique @map("user")
  bio       String  @default("")
  photo     String  @default("")
  phone     String  @default("")
  workPhone String  @default("")
}

model EdificioComment {
  id         String    @id @default(cuid())
  author     User?     @relation("EdificioComment_author", fields: [authorId], references: [id])
  authorId   String?   @map("author")
  edificio   Edificio? @relation("EdificioComment_edificio", fields: [edificioId], references: [id])
  edificioId String?   @map("edificio")
  comentario String    @default("")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@index([authorId])
  @@index([edificioId])
}

model AvisoComment {
  id         String    @id @default(cuid())
  author     User?     @relation("AvisoComment_author", fields: [authorId], references: [id])
  authorId   String?   @map("author")
  aviso      Aviso?    @relation("AvisoComment_aviso", fields: [avisoId], references: [id])
  avisoId    String?   @map("aviso")
  comentario String    @default("")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@index([authorId])
  @@index([avisoId])
}

model ElementoComment {
  id         String    @id @default(cuid())
  author     User?     @relation("ElementoComment_author", fields: [authorId], references: [id])
  authorId   String?   @map("author")
  elemento   Elemento? @relation("ElementoComment_elemento", fields: [elementoId], references: [id])
  elementoId String?   @map("elemento")
  comentario String    @default("")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@index([authorId])
  @@index([elementoId])
}

model InstalacionComment {
  id            String       @id @default(cuid())
  author        User?        @relation("InstalacionComment_author", fields: [authorId], references: [id])
  authorId      String?      @map("author")
  instalacion   Instalacion? @relation("InstalacionComment_instalacion", fields: [instalacionId], references: [id])
  instalacionId String?      @map("instalacion")
  comentario    String       @default("")
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @default(now())

  @@index([authorId])
  @@index([instalacionId])
}

model Subcription {
  id                                    String                @id @default(cuid())
  name                                  String                @default("")
  limits                                Int?
  price                                 Int?
  description                           String                @default("")
  createdAt                             DateTime?             @default(now())
  updatedAt                             DateTime?             @default(now())
  from_SubscriptionEmpresa_subscription SubscriptionEmpresa[] @relation("SubscriptionEmpresa_subscription")
}

model SubscriptionEmpresa {
  id             String       @id @default(cuid())
  empresa        Empresa?     @relation("SubscriptionEmpresa_empresa", fields: [empresaId], references: [id])
  empresaId      String?      @map("empresa")
  subscription   Subcription? @relation("SubscriptionEmpresa_subscription", fields: [subscriptionId], references: [id])
  subscriptionId String?      @map("subscription")
  expiration     DateTime?
  status         String?      @default("active")
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @default(now())

  @@index([empresaId])
  @@index([subscriptionId])
}

model Config {
  id        String    @id @default(cuid())
  key       String    @default("")
  value     String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: src/middleware.ts
================================================
import { withAuth } from 'next-auth/middleware';

export default withAuth({
  pages: {
    signIn: '/admin/login',
  },
});

export const config = {
    matcher: ['/', '/admin/:path*', '/dashboard/:path*'],
  };
  


================================================
File: src/app/layout.tsx
================================================
"use client";

import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";
import { CacheProvider } from "@emotion/react";
import { ThemeProvider, CssBaseline } from "@mui/material";
import { createTheme } from "@mui/material/styles";
import { createEmotionCache } from "../util/emotion-cache";

const clientSideEmotionCache = createEmotionCache();

const theme = createTheme({
  palette: {
    primary: {
      main: "#007bff",
    },
    secondary: {
      main: "#ff4081",
    },
  },
});

export default function RootLayout({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <html lang="es">
      <body>
        <SessionProvider>
          <CacheProvider value={clientSideEmotionCache}>
            <ThemeProvider theme={theme}>
              <CssBaseline />

              {children}

            </ThemeProvider>
          </CacheProvider>
        </SessionProvider>
      </body>
    </html>
  );
}


================================================
File: src/app/page.tsx
================================================
import React from 'react'
import { keystoneContext } from '../keystone/context'
import { DocumentRender } from './DocumentRender'
import { useSession } from 'next-auth/react';
  


export default async function HomePage () {
  // WARNING: this does nothing for now
  //   you will probably use getServerSession from 'next/auth'
  //   https://next-auth.js.org/configuration/nextjs#in-app-directory
  
  return (
    <section>
      <h1>Keystone 🤝 Next.js</h1>
      <ul>
        <li>Below you can see the names of users in the database.</li>
      </ul>

      <div>
        <p>
          <strong>Users fetched from the server</strong>
        </p>
        <ol>
          
        </ol>
      </div>

      <h2>How does it work?</h2>

      <p>
        Keystone's APIs can be seamlessly composed to work as a powerful data engine within Next.js
        applications without having to host a separate Keystone server. This is made possible by
        Keystone&apos;s `getContext` API.
      </p>
      <p>
        <em>
          Note: Since you are not starting the keystone server, the Admin UI will not be available.
          You can host Keystone as a separate server if you need Admin UI.
        </em>
      </p>
      <p>
        <a href="https://github.com/keystonejs/keystone/tree/main/examples/framework-nextjs-app-directory">
          Check out the example in the repo more info.
        </a>
      </p>
    </section>
  )
}


================================================
File: src/app/admin/login/page.tsx
================================================
// /app/admin/login/page.tsx
"use client";
import * as React from 'react';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Checkbox from '@mui/material/Checkbox';
import CssBaseline from '@mui/material/CssBaseline';
import FormControlLabel from '@mui/material/FormControlLabel';
import Divider from '@mui/material/Divider';
import FormLabel from '@mui/material/FormLabel';
import FormControl from '@mui/material/FormControl';
import Link from '@mui/material/Link';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
import Stack from '@mui/material/Stack';
import MuiCard from '@mui/material/Card';
import { styled } from '@mui/material/styles';
import ForgotPassword from '../../../components/ForgotPassword';
import AppTheme from '../../../shared-theme/AppTheme';
import ColorModeSelect from '../../../shared-theme/ColorModeSelect';
import { GoogleIcon, FacebookIcon, SitemarkIcon, EdifitechIcon } from '../../../components/CustomIcons';
import { signIn, getSession } from 'next-auth/react';
import { useState } from 'react';
import { CircularProgress } from '@mui/material';





const Card = styled(MuiCard)(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  alignSelf: 'center',
  width: '100%',
  padding: theme.spacing(4),
  gap: theme.spacing(2),
  margin: 'auto',
  [theme.breakpoints.up('sm')]: {
    maxWidth: '450px',
  },
  boxShadow:
    'hsla(220, 30%, 5%, 0.05) 0px 5px 15px 0px, hsla(220, 25%, 10%, 0.05) 0px 15px 35px -5px',
  ...theme.applyStyles('dark', {
    boxShadow:
      'hsla(220, 30%, 5%, 0.5) 0px 5px 15px 0px, hsla(220, 25%, 10%, 0.08) 0px 15px 35px -5px',
  }),
}));

const SignInContainer = styled(Stack)(({ theme }) => ({
  height: 'calc((1 - var(--template-frame-height, 0)) * 100dvh)',
  minHeight: '100%',
  padding: theme.spacing(2),
  [theme.breakpoints.up('sm')]: {
    padding: theme.spacing(4),
  },
  '&::before': {
    content: '""',
    display: 'block',
    position: 'absolute',
    zIndex: -1,
    inset: 0,
    backgroundImage:
      'radial-gradient(ellipse at 50% 50%, hsl(210, 100%, 97%), hsl(0, 0%, 100%))',
    backgroundRepeat: 'no-repeat',
    ...theme.applyStyles('dark', {
      backgroundImage:
        'radial-gradient(at 50% 50%, hsla(210, 100%, 16%, 0.5), hsl(220, 30%, 5%))',
    }),
  },
}));

export default function Login(props: { disableCustomTheme?: boolean }) {
  const [emailError, setEmailError] = React.useState(false);
  const [emailErrorMessage, setEmailErrorMessage] = React.useState('');
  const [passwordError, setPasswordError] = React.useState(false);
  const [passwordErrorMessage, setPasswordErrorMessage] = React.useState('');
  const [open, setOpen] = React.useState(false);


  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const [loading, setLoading] = useState(false);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true);
    const data = new FormData(event.currentTarget);
  
    const result = await signIn('credentials', {
      redirect: false,
      email: data.get('email'),
      password: data.get('password'),
    });
    console.log( '🔥Result:',result);
    setLoading(false);
  
    if (result?.ok) {
      const session = await getSession();
      const role = session?.user?.rol;
  
      if (role.name === 'admin') {
        router.push('/admin/dashboard');
      } else {
        router.push('/user/dashboard');
      }
    } else {
      alert('Error al iniciar sesión');
    }
  };

  const validateInputs = () => {
    const email = document.getElementById('email') as HTMLInputElement;
    const password = document.getElementById('password') as HTMLInputElement;

    let isValid = true;

    if (!email.value || !/\S+@\S+\.\S+/.test(email.value)) {
      setEmailError(true);
      setEmailErrorMessage('Porfavor introduce un Email correcto.');
      isValid = false;
    } else {
      setEmailError(false);
      setEmailErrorMessage('');
    }

    if (!password.value || password.value.length < 6) {
      setPasswordError(true);
      setPasswordErrorMessage('La contraseña debe ser de 6 caracteres o superior.');
      isValid = false;
    } else {
      setPasswordError(false);
      setPasswordErrorMessage('');
    }

    return isValid;
  };

  return (
    <AppTheme {...props}>
      <CssBaseline enableColorScheme />
      <SignInContainer direction="column" justifyContent="space-between">
        <ColorModeSelect sx={{ position: 'fixed', top: '1rem', right: '1rem' }} />
        <Card variant="outlined">
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'center', // Centra horizontalmente
              alignItems: 'center', // Centra verticalmente
              height: '100%', // Asegura que el contenedor tenga suficiente altura
            }}
          >
            <EdifitechIcon />
          </Box>
          <Typography
            component="h1"
            variant="h4"
            sx={{ width: '100%', fontSize: 'clamp(2rem, 10vw, 2.15rem)' }}
          >
            Inicio de sesión
          </Typography>
          <Box
            component="form"
            onSubmit={handleSubmit}
            noValidate
            sx={{
              display: 'flex',
              flexDirection: 'column',
              width: '100%',
              gap: 2,
            }}
          >
            <FormControl>
              <FormLabel htmlFor="email">Email</FormLabel>
              <TextField
                error={emailError}
                helperText={emailErrorMessage}
                id="email"
                type="email"
                name="email"
                placeholder="tucorreo@email.com"
                autoComplete="email"
                autoFocus
                required
                fullWidth
                variant="outlined"
                color={emailError ? 'error' : 'primary'}
              />
            </FormControl>
            <FormControl>
              <FormLabel htmlFor="password">Password</FormLabel>
              <TextField
                error={passwordError}
                helperText={passwordErrorMessage}
                name="password"
                placeholder="••••••"
                type="password"
                id="password"
                autoComplete="current-password"
                autoFocus
                required
                fullWidth
                variant="outlined"
                color={passwordError ? 'error' : 'primary'}
              />
            </FormControl>
            <FormControlLabel
              control={<Checkbox value="remember" color="primary" />}
              label="Recuerdame"
            />
            <ForgotPassword open={open} handleClose={handleClose} />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              onClick={validateInputs}
            >
              {loading ? <CircularProgress size={24} /> : 'Iniciar Sesión'}
            </Button>
            <Link
              component="button"
              type="button"
              onClick={handleClickOpen}
              variant="body2"
              sx={{ alignSelf: 'center' }}
            >
              Recuperar contraseña
            </Link>
          </Box>
          <Divider>o</Divider>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <Button
              fullWidth
              variant="outlined"
              onClick={() => signIn('google', { callbackUrl: '/dashboard' })}
              startIcon={<GoogleIcon />}
            >
              Inicia sesión con Google
            </Button>

            <Typography sx={{ textAlign: 'center' }}>
              No tienes cuenta?{' '}
              <Link
                href="/admin/signup"
                variant="body2"
                sx={{ alignSelf: 'center' }}
              >
                Regístrate
              </Link>
            </Typography>
          </Box>
        </Card>
      </SignInContainer>
    </AppTheme>
  );
}

================================================
File: src/app/api/auth/[...nextauth]/route.ts
================================================
import NextAuth, { AuthOptions, Session } from 'next-auth';
import { keystoneContext } from '../../../../keystone/context';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';
import { session } from '../../../../../auth';
import { request } from 'http';
import { Token } from 'graphql';
import type { DefaultJWT } from 'next-auth/jwt'
import type { DefaultSession, DefaultUser } from 'next-auth'


export const authOptions: AuthOptions = {
  secret: process.env.NEXTAUTH_SECRET,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials, req) {
        const { email, password } = credentials || {};
        console.log('🔥Credentials:', { email, password });
        console.log('🔥Req:', req);
        const context = await keystoneContext.withRequest(req);

      
        try {
          const result = await (await context).graphql.raw({
            query: `
              mutation Login($email: String!, $password: String!) {
                authenticateUserWithPassword(email: $email, password: $password) {
                  ... on UserAuthenticationWithPasswordSuccess {
                    item {
                      id
                      email
                      rol {
                        level
                      }
                    }
                    sessionToken
                  }
                  ... on UserAuthenticationWithPasswordFailure {
                    message
                  }
                }
              }
            `,
            variables: { email, password },
          });
          
      
          console.log('🔥Result:', result);
      
          const authResult = result.data?.authenticateUserWithPassword;

          
          
      
          if (authResult?.__typename === 'UserAuthenticationWithPasswordSuccess') {
            // Devuelve el usuario y el sessionToken
            return {
              id: authResult.item.id,
              email: authResult.item.email,
              rol: authResult.item.rol?.level,
              sessionToken: authResult.sessionToken,
            };
          }
      
          throw new Error(authResult?.message || 'Authentication failed');
        } catch (error) {
          console.error('Error during authentication:', error);
          throw new Error(error.message || 'Error during authentication');
        }
      }
      
    })
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.rol = user.rol;
        token.sessionToken = user.sessionToken; // Incluye el sessionToken
      }
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user = {
          id: token.id,
          email: token.email,
          rol: token.rol,
        };
        session.sessionToken = token.sessionToken; // Añade el sessionToken
      }
      return session;
    },
  },
  pages: {
    signIn: '/auth/signin',
    error: '/auth/error'
  },
  debug: process.env.NODE_ENV === 'development',
};

export const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

================================================
File: src/app/api/keystone-auth/route.ts
================================================
// app/api/keystone-auth/route.ts
import { keystoneContext } from '../../../keystone/context';

// app/api/keystone-auth/route.ts
export async function POST(request: Request) {
    try {
      const { email, password } = await request.json();
  
      const result = await keystoneContext.graphql.raw({
        query: `
          mutation ($email: String!, $password: String!) {
            authenticateUserWithPassword(email: $email, password: $password) {
              ... on UserAuthenticationWithPasswordSuccess {
                sessionToken
                item { id email rol { level } }
              }
              ... on UserAuthenticationWithPasswordFailure {
                message
              }
            }
          }
        `,
        variables: { email, password }
      });
  
      const authResult = result.data?.authenticateUserWithPassword;
  
      if (authResult?.__typename === 'UserAuthenticationWithPasswordSuccess') {
        const headers = {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': process.env.NEXTAUTH_URL || 'http://localhost:3000',
          'Access-Control-Allow-Credentials': 'true',
          'Set-Cookie': `keystonejs-session=${authResult.sessionToken}; Path=/; HttpOnly; ${
            process.env.NODE_ENV === 'production' ? 'Secure; SameSite=None' : 'SameSite=Lax'
          }`
        };
  
        return new Response(JSON.stringify({
          success: true,
          rol: authResult.item.rol
        }), { status: 200, headers });
      }
  
      return new Response(JSON.stringify({
        success: false,
        message: authResult?.message || 'Credenciales inválidas'
      }), { status: 401 });
  
    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        message: 'Error interno del servidor'
      }), { status: 500 });
    }
  }
  
  export async function OPTIONS() {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': process.env.NEXTAUTH_URL || 'http://localhost:3000',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Credentials': 'true'
      }
    });
  }

================================================
File: src/app/dashboard/page.tsx
================================================
'use client';

import { useSession, signOut } from 'next-auth/react';
import Image from 'next/image';

const Dashboard = () => {
  const { data: session } = useSession();
  console.log(session);

  if (!session?.user) {
    return <div>Cargando...</div>;
  }

  return (
    <div>
      <h1>Dashboard</h1>
      <img src={session.user.image} alt={session.user.name} />
      <p>Bienvenido, {session.user.name}</p>
      {session.user.isAdmin ? <p>Tienes privilegios de administrador.</p> : <p>Acceso de usuario.</p>}
      <button onClick={() => signOut()}>Cerrar Sesión</button>
    </div>
  );
};

export default Dashboard;


================================================
File: src/components/CustomIcons.tsx
================================================
import * as React from 'react';
import SvgIcon from '@mui/material/SvgIcon';

export function EdifitechIcon() {
  return (
    <SvgIcon sx={{ height: 50, width: 200 }}>
      <svg
    width={100}
    height={50}
    viewBox="-2.471 91.601 216.686 66.89"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      style={{
        fill: "#3F51B5",
        strokeWidth: 0.264583,
      }}
      d="M23.51 157.978c-1.16-.589-2.208-2.029-2.55-3.499-.292-1.26.31-2.792 1.582-4.028l1.173-1.14-.009-21.521-.009-21.521-4.06-3.562c-2.234-1.959-4.195-3.606-4.358-3.66-.215-.072-.295 3.765-.292 14.145l.003 14.243.917.594c1.347.873 2.073 2.465 1.927 4.226-.312 3.761-4.693 5.534-7.61 3.08-1.142-.962-1.642-2.065-1.63-3.6.011-1.531.922-3.148 2.174-3.86l.773-.44.001-5.318.002-5.319-3.46-2.834c-1.904-1.558-3.63-2.898-3.837-2.978-.322-.123-.375 1.721-.366 12.783l.01 12.927 1.001.691c2.313 1.598 2.579 5.149.525 7.017-1.62 1.474-3.485 1.791-5.245.893-2.46-1.255-3.367-4.159-2.018-6.46.384-.654 1.053-1.4 1.487-1.656l.79-.467v-16.502c0-10.503.093-16.469.256-16.413.14.049 2.532 1.934 5.314 4.19 2.783 2.255 5.168 4.14 5.3 4.189.145.052.243-4.114.243-10.253 0-8.105.071-10.337.33-10.324.183.01 3.665 2.965 7.74 6.568l7.408 6.55.07 7.852c.043 4.82.169 7.853.326 7.853.14 0 2.59-1.906 5.443-4.235s5.296-4.167 5.43-4.085c.14.086.24 5.545.24 13.006v12.858l1.093.935c1.817 1.555 2.304 3.608 1.317 5.542-.619 1.213-1.22 1.77-2.477 2.295-1.86.777-3.632.376-5.13-1.163-1.889-1.94-1.758-4.551.33-6.562l1.163-1.12v-9.397c0-5.168-.068-9.397-.152-9.397-.194 0-7.056 5.574-7.318 5.943-.107.151-.196 5.642-.198 12.203l-.005 11.928 1.081.868c1.524 1.225 2.092 2.271 2.092 3.85 0 3.425-3.725 5.657-6.818 4.085m3.789-2.485c1.407-1.407.435-3.87-1.548-3.925-2.079-.06-3.196 2.396-1.778 3.906.86.917 2.42.926 3.326.02m11.113-11.428c.923-.996.874-2.29-.125-3.289-1.183-1.183-2.83-.924-3.6.567-1.241 2.4 1.898 4.693 3.725 2.722m-34.73-1.155c1.747-1.373.713-4.23-1.53-4.23-1.043 0-1.722.468-2.143 1.477-.327.782-.327 1.026-.003 1.803.207.495.596 1.027.864 1.183.778.452 2.08.344 2.813-.233m10.812-9.014c.294-.157.705-.693.913-1.19.327-.784.327-1.026 0-1.81-.821-1.964-3.286-2.036-4.274-.126-1.075 2.08 1.26 4.251 3.361 3.126m163.484 3.267c-2.553-.478-5.515-2.446-6.962-4.627-1.549-2.333-2.126-4.39-2.137-7.614-.02-5.393 2.13-9.313 6.232-11.363 4.04-2.019 9.88-1.74 13.483.645l1.033.683-.856 1.193c-1.258 1.752-1.406 1.832-2.262 1.225-1.905-1.35-5.874-1.805-8.361-.958-1.687.575-3.696 2.447-4.6 4.288-.661 1.348-.74 1.79-.739 4.154.001 2.299.092 2.84.693 4.124 1.703 3.639 5.235 5.397 9.485 4.722.98-.156 2.317-.607 3.092-1.043l1.366-.77 1.069 1.416c.994 1.318 1.037 1.443.618 1.82-.711.641-3.007 1.717-4.297 2.014-1.165.269-5.596.328-6.857.091M42.236 124.79v-12.303h16.14v3.705H45.94v6.879h11.4l-.078 1.786-.078 1.786-5.623.071-5.622.071v6.604h12.435v3.705h-16.14zm20.902 0v-12.303l4.96.002c6.017.002 7.83.26 10.299 1.463 5.507 2.684 7.641 9.562 5.09 16.404-.824 2.208-3.448 4.831-5.656 5.655-2.49.929-3.83 1.082-9.438 1.082h-5.255zm13.097 7.751c1.679-.878 2.85-2.101 3.624-3.782.845-1.836.87-6.013.045-7.818-.801-1.754-2.046-3.041-3.747-3.873-1.423-.696-1.684-.732-5.34-.738l-3.843-.006-.07 8.561-.07 8.561 4.04-.106c3.731-.098 4.138-.159 5.36-.798m12.567-7.75v-12.304h3.705v24.607h-3.705zm9.525 0v-12.304h16.14v3.695l-6.152.07-6.151.072-.074 3.638-.073 3.638h11.416l-.078 1.786-.079 1.786-5.622.071-5.622.071v9.78h-3.704zm20.109 0v-12.304h3.704v24.607h-3.704zm15.346 1.99v-10.31l-3.903-.074-3.903-.073v-3.704l9.724-.07 9.723-.07v3.976h-7.673v20.638h-3.968zm15.61-1.99v-12.304h16.14v3.705h-12.436v6.879h11.401l-.078 1.786-.078 1.786-5.622.071-5.623.071v6.604h12.436v3.705h-16.14zm43.92 0v-12.304h3.705v10.584h13.494v-10.584h3.704v24.607h-3.704v-10.32h-13.494v10.32h-3.704z"
    />
  </svg>
    </SvgIcon>
  );
}


export function SitemarkIcon() {
  return (
    <SvgIcon sx={{ height: 21, width: 100 }}>
      <svg
        width={86}
        height={19}
        viewBox="0 0 86 19"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill="#B4C0D3"
          d="m.787 12.567 6.055-2.675 3.485 2.006.704 6.583-4.295-.035.634-4.577-.74-.422-3.625 2.817-2.218-3.697Z"
        />
        <path
          fill="#00D3AB"
          d="m10.714 11.616 5.352 3.908 2.112-3.767-4.295-1.725v-.845l4.295-1.76-2.112-3.732-5.352 3.908v4.013Z"
        />
        <path
          fill="#4876EF"
          d="m10.327 7.286.704-6.583-4.295.07.634 4.577-.74.422-3.66-2.816L.786 6.617l6.055 2.676 3.485-2.007Z"
        />
        <path
          fill="#4876EE"
          d="M32.507 8.804v6.167h2.312v-7.86h-3.366v1.693h1.054ZM32.435 6.006c.212.22.535.33.968.33.434 0 .751-.11.953-.33.213-.23.318-.516.318-.86 0-.354-.105-.641-.318-.86-.202-.23-.52-.345-.953-.345-.433 0-.756.115-.968.344-.202.22-.303.507-.303.86 0 .345.101.632.303.861ZM24.46 14.799c.655.296 1.46.444 2.413.444.896 0 1.667-.139 2.312-.416.645-.277 1.141-.664 1.488-1.162.357-.506.535-1.094.535-1.764 0-.65-.169-1.2-.506-1.649-.328-.459-.785-.818-1.373-1.076-.587-.267-1.266-.435-2.037-.502l-.809-.071c-.481-.039-.828-.168-1.04-.388a1.08 1.08 0 0 1-.318-.774c0-.23.058-.44.173-.631.116-.201.29-.359.52-.474.241-.114.535-.172.882-.172.366 0 .67.067.91.201.053.029.104.059.15.09l.012.009.052.037c.146.111.263.243.35.395.125.21.188.444.188.703h2.311c0-.689-.159-1.286-.476-1.793-.318-.516-.776-.913-1.373-1.19-.588-.287-1.296-.43-2.124-.43-.79 0-1.474.133-2.052.4a3.131 3.131 0 0 0-1.358 1.12c-.318.487-.477 1.066-.477 1.735 0 .927.314 1.673.94 2.237.626.564 1.464.89 2.514.976l.794.071c.645.058 1.113.187 1.401.388a.899.899 0 0 1 .434.788 1.181 1.181 0 0 1-.231.717c-.154.201-.38.36-.68.474-.298.115-.669.172-1.112.172-.49 0-.89-.067-1.199-.2-.308-.144-.539-.33-.694-.56a1.375 1.375 0 0 1-.216-.746h-2.297c0 .679.168 1.281.505 1.807.337.517.834.928 1.489 1.234ZM39.977 15.07c-.8 0-1.445-.095-1.936-.286a2.03 2.03 0 0 1-1.084-.99c-.221-.469-.332-1.1-.332-1.893V8.789h-1.2V7.11h1.2V4.988h2.153V7.11h2.312V8.79h-2.312v3.198c0 .373.096.66.289.86.202.192.486.287.852.287h1.17v1.937h-1.112Z"
        />
        <path
          fill="#4876EE"
          fillRule="evenodd"
          d="M43.873 14.899c.52.23 1.117.344 1.791.344.665 0 1.252-.115 1.763-.344.51-.23.934-.55 1.271-.96.337-.412.564-.88.679-1.407h-2.124c-.096.24-.279.44-.549.603-.27.162-.616.244-1.04.244-.262 0-.497-.031-.704-.093a1.572 1.572 0 0 1-.423-.194 1.662 1.662 0 0 1-.636-.803 3.159 3.159 0 0 1-.163-.645h5.784v-.775a4.28 4.28 0 0 0-.463-1.98 3.686 3.686 0 0 0-1.343-1.477c-.578-.382-1.291-.574-2.139-.574-.645 0-1.223.115-1.733.345-.501.22-.92.52-1.257.903a4.178 4.178 0 0 0-.78 1.305c-.174.478-.26.98-.26 1.506v.287c0 .507.086 1.004.26 1.492.183.478.443.913.78 1.305.347.382.775.688 1.286.918Zm-.094-4.674.02-.09a2.507 2.507 0 0 1 .117-.356c.145-.354.356-.622.636-.804.104-.067.217-.123.339-.165.204-.071.433-.107.686-.107.395 0 .723.09.983.272.27.173.472.426.607.76a2.487 2.487 0 0 1 .16.603h-3.57c.006-.038.013-.076.022-.113Z"
          clipRule="evenodd"
        />
        <path
          fill="#4876EE"
          d="M50.476 14.97V7.112h1.835v1.98a4.54 4.54 0 0 1 .173-.603c.202-.536.506-.937.91-1.205.405-.277.9-.416 1.488-.416h.101c.598 0 1.094.139 1.489.416.404.268.707.67.91 1.205l.016.04.013.037.028-.077c.212-.536.52-.937.925-1.205.405-.277.901-.416 1.489-.416h.1c.598 0 1.098.139 1.503.416.414.268.727.67.94 1.205.211.535.317 1.205.317 2.008v4.475h-2.312v-4.604c0-.43-.115-.78-.346-1.047-.222-.268-.54-.402-.954-.402-.414 0-.742.139-.982.416-.241.268-.362.626-.362 1.076v4.56h-2.326v-4.603c0-.43-.115-.78-.346-1.047-.222-.268-.535-.402-.94-.402-.423 0-.756.139-.996.416-.241.268-.362.626-.362 1.076v4.56h-2.311Z"
        />
        <path
          fill="#4876EE"
          fillRule="evenodd"
          d="M68.888 13.456v1.515h1.834v-4.82c0-.726-.144-1.319-.433-1.778-.289-.468-.712-.817-1.271-1.047-.549-.23-1.228-.344-2.037-.344a27.76 27.76 0 0 0-.896.014c-.318.01-.626.024-.924.043l-.229.016a36.79 36.79 0 0 0-.552.042v1.936a81.998 81.998 0 0 1 1.733-.09 37.806 37.806 0 0 1 1.171-.025c.424 0 .732.1.925.301.193.201.289.502.289.904v.029h-1.43c-.704 0-1.325.09-1.864.272-.54.172-.959.445-1.257.818-.299.363-.448.832-.448 1.405 0 .526.12.98.361 1.363.24.373.573.66.997.86.433.201.934.302 1.502.302.55 0 1.012-.1 1.388-.302.385-.2.683-.487.895-.86a2.443 2.443 0 0 0 .228-.498l.018-.056Zm-.39-1.397v-.63h-1.445c-.405 0-.718.1-.939.3-.212.192-.318.455-.318.79 0 .157.026.3.08.429a.99.99 0 0 0 .238.345c.221.191.534.287.939.287a2.125 2.125 0 0 0 .394-.038c.106-.021.206-.052.3-.092.212-.095.385-.253.52-.473.135-.22.212-.526.23-.918Z"
          clipRule="evenodd"
        />
        <path
          fill="#4876EE"
          d="M72.106 14.97V7.11h1.835v2.595c.088-.74.31-1.338.665-1.791.481-.603 1.174-.904 2.08-.904h.303v1.98h-.578c-.635 0-1.127.172-1.473.516-.347.334-.52.822-.52 1.463v4.001h-2.312ZM79.92 11.298h.767l2.499 3.672h2.6l-3.169-4.51 2.606-3.35h-2.427l-2.875 3.737V4.5h-2.312v10.47h2.312v-3.672Z"
        />
      </svg>
    </SvgIcon>
  );
}

export function FacebookIcon() {
  return (
    <SvgIcon>
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M6.68 15.92C2.88 15.24 0 11.96 0 8C0 3.6 3.6 0 8 0C12.4 0 16 3.6 16 8C16 11.96 13.12 15.24 9.32 15.92L8.88 15.56H7.12L6.68 15.92Z"
          fill="url(#paint0_linear_795_116)"
        />
        <path
          d="M11.12 10.2391L11.48 7.99914H9.36V6.43914C9.36 5.79914 9.6 5.31914 10.56 5.31914H11.6V3.27914C11.04 3.19914 10.4 3.11914 9.84 3.11914C8 3.11914 6.72 4.23914 6.72 6.23914V7.99914H4.72V10.2391H6.72V15.8791C7.16 15.9591 7.6 15.9991 8.04 15.9991C8.48 15.9991 8.92 15.9591 9.36 15.8791V10.2391H11.12Z"
          fill="white"
        />
        <defs>
          <linearGradient
            id="paint0_linear_795_116"
            x1="8"
            y1="0"
            x2="8"
            y2="15.9991"
            gradientUnits="userSpaceOnUse"
          >
            <stop stopColor="#1AAFFF" />
            <stop offset="1" stopColor="#0163E0" />
          </linearGradient>
        </defs>
      </svg>
    </SvgIcon>
  );
}

export function GoogleIcon() {
  return (
    <SvgIcon>
      <svg
        width="16"
        height="16"
        viewBox="0 0 16 16"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M15.68 8.18182C15.68 7.61455 15.6291 7.06909 15.5345 6.54545H8V9.64364H12.3055C12.1164 10.64 11.5491 11.4836 10.6982 12.0509V14.0655H13.2945C14.8073 12.6691 15.68 10.6182 15.68 8.18182Z"
          fill="#4285F4"
        />
        <path
          d="M8 16C10.16 16 11.9709 15.2873 13.2945 14.0655L10.6982 12.0509C9.98545 12.5309 9.07636 12.8218 8 12.8218C5.92 12.8218 4.15273 11.4182 3.52 9.52727H0.858182V11.5927C2.17455 14.2036 4.87273 16 8 16Z"
          fill="#34A853"
        />
        <path
          d="M3.52 9.52C3.36 9.04 3.26545 8.53091 3.26545 8C3.26545 7.46909 3.36 6.96 3.52 6.48V4.41455H0.858182C0.312727 5.49091 0 6.70545 0 8C0 9.29455 0.312727 10.5091 0.858182 11.5855L2.93091 9.97091L3.52 9.52Z"
          fill="#FBBC05"
        />
        <path
          d="M8 3.18545C9.17818 3.18545 10.2255 3.59273 11.0618 4.37818L13.3527 2.08727C11.9636 0.792727 10.16 0 8 0C4.87273 0 2.17455 1.79636 0.858182 4.41455L3.52 6.48C4.15273 4.58909 5.92 3.18545 8 3.18545Z"
          fill="#EA4335"
        />
      </svg>
    </SvgIcon>
  );
}


================================================
File: src/components/ForgotPassword.tsx
================================================
import * as React from 'react';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import OutlinedInput from '@mui/material/OutlinedInput';

interface ForgotPasswordProps {
  open: boolean;
  handleClose: () => void;
}

export default function ForgotPassword({ open, handleClose }: ForgotPasswordProps) {
  return (
    <Dialog
      open={open}
      onClose={handleClose}
      PaperProps={{
        component: 'form',
        onSubmit: (event: React.FormEvent<HTMLFormElement>) => {
          event.preventDefault();
          handleClose();
        },
        sx: { backgroundImage: 'none' },
      }}
    >
      <DialogTitle>Reset password</DialogTitle>
      <DialogContent
        sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }}
      >
        <DialogContentText>
          Enter your account&apos;s email address, and we&apos;ll send you a link to
          reset your password.
        </DialogContentText>
        <OutlinedInput
          autoFocus
          required
          margin="dense"
          id="email"
          name="email"
          label="Email address"
          placeholder="Email address"
          type="email"
          fullWidth
        />
      </DialogContent>
      <DialogActions sx={{ pb: 3, px: 3 }}>
        <Button onClick={handleClose}>Cancel</Button>
        <Button variant="contained" type="submit">
          Continue
        </Button>
      </DialogActions>
    </Dialog>
  );
}


================================================
File: src/keystone/context.ts
================================================
import { getContext } from '@keystone-6/core/context'
import config from '../../keystone'
import { type Context } from '.keystone/types'
import * as PrismaModule from 'myprisma'


// Making sure multiple prisma clients are not created during hot reloading
export const keystoneContext: Context = (globalThis as any).keystoneContext ?? getContext(config, PrismaModule)


if (process.env.NODE_ENV !== 'production') {
  (globalThis as any).keystoneContext = keystoneContext
}





================================================
File: src/keystone/schema.ts
================================================
//delete: ({ session }) => !!session?.data,
import { list, graphql } from '@keystone-6/core'
import { allOperations, allowAll } from '@keystone-6/core/access'
import {
  text,
  relationship,
  password,
  timestamp,
  select,
  integer,
  virtual,
} from '@keystone-6/core/fields'
//import { checkRoleLevel } from './hooks/user-hook';



export const lists = {
  Admin: list({
    ui: {
      isHidden: true
    },
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ validation: { isRequired: true } }),
      agente: integer(),
    },
  }),

  Categoria: list({
    ui: {
      isHidden: true
    },
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ validation: { isRequired: true } }),
    },
  }),


  Comunidad: list({
    ui: {
      label: 'Comunidades',
      
    },
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ validation: { isRequired: true } }),
      direccion: text(),
      cp: integer(),
      admin: relationship({ ref: 'Admin', many: false }),
      cif: text(),
      author: relationship({ ref: 'User', many: false }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
      edificios: relationship({ ref: 'Edificio.comunidad', many: true }),
    },
  }),

  Contacto: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text(),
      telefono: text(),
      piso: text(),
      edificio: relationship({ ref: 'Edificio', many: false }),
      comunidad: relationship({ ref: 'Comunidad', many: false }),
      tipo: select({
        options: ['vecino', 'mantenedor', 'presidente'],
        defaultValue: 'vecino',
      }),
    },
  }),

  Documento: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ validation: { isRequired: true } }),
      archivo: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  Edificio: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ validation: { isRequired: true } }),
      comunidad: relationship({ ref: 'Comunidad.edificios' }),
      instalaciones: relationship({ ref: 'Instalacion.edificio', many: true }),
      tipo: select({
        options: ['bloque', 'acceso'],
        defaultValue: 'bloque',
      }),
      admin: relationship({ ref: 'Admin', many: false }),
      label: virtual({
        field: graphql.field({
          type: graphql.String,
          async resolve(item: any, args, context) {
            if (!item.comunidadId) return item.name; // Change item.marca to item.marcaId
            const comunidad = await context.db.Comunidad.findOne({
              where: { id: item.comunidadId }, // Change item.marca to item.marcaId
            });
            return `${comunidad?.name || ''} - ${item.name}`;
          },
        }),
      }),
    },
  }),

  Elemento: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      producto: relationship({ ref: 'Producto', many: false }),
      estado: select({
        options: ['averiado', 'reparado', 'ok'],
        defaultValue: 'ok',
      }),
      instalacion: relationship({ ref: 'Instalacion.elementos' }),
      cantidad: integer({ defaultValue: 1 }),
      observaciones: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
      group: select({
        options: ['placa', 'terminales', 'rfid', 'otros'],
        defaultValue: 'otros',
      }),
    },
  }),

  Empresa: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text(),
      logo: text(),
      cif: text(),
    },
  }),

  Imagen: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      archivo: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  Manual: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      producto: relationship({ ref: 'Producto', many: false }),
      documento: relationship({ ref: 'Documento', many: false }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  Marca: list({
    ui: {
      isHidden: true
    },
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text(),
      categoria: relationship({ ref: 'Categoria', many: false }),
    },
  }),

  Instalacion: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      tipo: select({
        options: ['portero', 'antena', 'electricidad', 'contraincendios', 'cerrajeria', 'automatismos', 'cctv', 'otros'],
        defaultValue: 'portero',
      }),
      descripcion: text(),
      edificio: relationship({ ref: 'Edificio.instalaciones' }),
    elementos: relationship({ ref: 'Elemento.instalacion', many: true }),
    comentarios: relationship({ ref: 'InstalacionComment.instalacion', many: true }),
    },
  }),

  Contraincendio: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      serial_number: text(),
      date_made: timestamp(),
      date_retimbrado: timestamp(),
      date_last_revision: timestamp(),
      date_next_revision: timestamp(),
      tecnico: relationship({ ref: 'User', many: false }),
      descripcion: text(),
      elemento: relationship({ ref: 'Elemento', many: false }),
    },
  }),

  Inst_Otro: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      serial_number: text(),
      date_made: timestamp(),
      date_last_revision: timestamp(),
      date_next_revision: timestamp(),
      elemento: relationship({ ref: 'Elemento', many: false }),
      tecnico: relationship({ ref: 'User', many: false }),
    },
  }),

  Reparacion: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      date_repair: timestamp(),
      tecnico: relationship({ ref: 'User', many: false }),
      descripcion: text(),
      elemento: relationship({ ref: 'Elemento', many: false }),
    },
  }),

  Producto: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      ref: text({ label: 'Referencia', validation: { isRequired: true } }),
      descripcion: text(),
      categoria: relationship({
        ref: 'Categoria',
        many: false,
        ui: {
          displayMode: 'cards',
          cardFields: ['name'],
          linkToItem: true,
          inlineCreate: { fields: ['name'] },
          inlineEdit: { fields: ['name'] },
          inlineConnect: true,
        }
      }),
      subcategoria: relationship({
        ref: 'Subcategoria',
        many: false,
        ui: {
          displayMode: 'cards',
          cardFields: ['name'],
          linkToItem: true,
          inlineCreate: { fields: ['name'] },
          inlineEdit: { fields: ['name'] },
          inlineConnect: true,
        }
      }),
      marca: relationship({
        ref: 'Marca',
        many: false,
        ui: {
          displayMode: 'cards',
          cardFields: ['name'],
          linkToItem: true,
          inlineCreate: { fields: ['name'] },
          inlineEdit: { fields: ['name'] },
          inlineConnect: true,
        }
      }),
      precio: integer({ label: 'Precio (€)', validation: { isRequired: false } }),
      ean: text({ label: 'EAN 13', validation: { isRequired: false } }),
      imagen: relationship({ ref: 'Imagen', many: false }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
      label: virtual({
        field: graphql.field({
          type: graphql.String,
          async resolve(item: any, args, context) {
            if (!item.marcaId) return item.ref; // Change item.marca to item.marcaId
            const marca = await context.db.Marca.findOne({
              where: { id: item.marcaId }, // Change item.marca to item.marcaId
            });
            return `${marca?.name || ''} - ${item.ref}`;
          },
        }),
        ui: {
          description: 'Etiqueta combinada de Marca y Referencia',
        },
      }),
    },
    ui: {
      labelField: 'label', // Usar el campo virtual como etiqueta
    },
  }),
  Rol: list({
    ui: {
      isHidden: true
    },
    access: {
      operation: {
        query: allowAll,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ label: 'Nombre' }),
      level: integer({ label: 'Nivel' }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
      deletedAt: timestamp(),
      users: relationship({
        ref: 'User.rol',
        many: true,
      }),
    },
  }),

  Subcategoria: list({
    ui: {
      isHidden: true
    },
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({ label: 'Nombre' }),
      categoria: relationship({ ref: 'Categoria', many: false }),
    },
  }),

  Telefonillo: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      modelo: text(),
      abrep: text(),
      micro: text(),
      comun: text(),
      altavoz: text(),
      llamada: text(),
    },
  }),

  // En el User list
  User: list({
    access: {
      operation: {
        query: allowAll,
        create: allowAll,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text({
        validation: { isRequired: true },
        label: 'Nombre'
      }),
      email: text({
        validation: { isRequired: true },
        isIndexed: 'unique',
        label: 'Correo electrónico'
      }),
      password: password({
        label: 'Contraseña'
      }),
      googleId: text({ isIndexed: 'unique' }),
      photo: text({
        label: 'Foto de perfil'
      }),
      lastLogin: timestamp({
        label: 'Último acceso'
      }),
      createdAt: timestamp({
        defaultValue: { kind: 'now' },
        label: 'Fecha de creación'
      }),
      updatedAt: timestamp({
        defaultValue: { kind: 'now' },
        label: 'Última actualización'
      }),
      profile: relationship({
        ref: 'Profile.user',
        ui: {
          displayMode: 'cards',
          cardFields: ['bio'],
          inlineEdit: {
            fields: ['bio']
          },
          linkToItem: true
        }
      }),
      empresa: relationship({
        ref: 'Empresa',
        many: false,
        label: 'Empresa'
      }),
      rol: relationship({
        ref: 'Rol.users',
        many: false,
        label: 'Rol'
      }),
      tecnicoNum: integer({
        label: 'ID del técnico'
      }),
      token: text({
        label: 'Token'
      }),
    },
  }),
  Aviso: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      numero: text({ validation: { isRequired: true } }),
      comunidad: relationship({ ref: 'Comunidad', many: false }),
      tecnico: relationship({ ref: 'User', many: false }),
      solucion: text(),
      observaciones: text(),
      status: select({
        options: ['Pendiente', 'En Proceso', 'Finalizado'],
        defaultValue: 'Pendiente',
      }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),

    },
  }),
  History: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      aviso: relationship({ ref: 'Aviso', many: false }),
      tecnico: relationship({ ref: 'User', many: false }),
      status: select({
        options: ['Pendiente', 'En Proceso', 'Finalizado'],
        defaultValue: 'Pendiente',
      }),
      observaciones: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),

    },
  }),
  Adjunto: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      aviso: relationship({ ref: 'Aviso', many: false }),
      url: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),

    },
  }),

  Profile: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      user: relationship({ ref: 'User.profile', many: false }),
      bio: text(),
      photo: text(),
      phone: text(),
      workPhone: text(),
    },
  }),

  EdificioComment: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      author: relationship({ ref: 'User', many: false }),
      edificio: relationship({ ref: 'Edificio', many: false }),
      comentario: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  AvisoComment: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      author: relationship({ ref: 'User', many: false }),
      aviso: relationship({ ref: 'Aviso', many: false }),
      comentario: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  ElementoComment: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      author: relationship({ ref: 'User', many: false }),
      elemento: relationship({ ref: 'Elemento', many: false }),
      comentario: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  InstalacionComment: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      author: relationship({ ref: 'User', many: false }),
      instalacion: relationship({ ref: 'Instalacion.comentarios' }),
      comentario: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  Subcription: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      name: text(),
      limits: integer(),
      price: integer(),
      description: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  SubscriptionEmpresa: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      empresa: relationship({ ref: 'Empresa', many: false }),
      subscription: relationship({ ref: 'Subcription', many: false }),
      expiration: timestamp(),
      status: select({
        options: ['active', 'expired'],
        defaultValue: 'active',
      }),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),

  Config: list({
    access: {
      operation: {
        query: ({ session }) => !!session?.data,
        create: ({ session }) => !!session?.data,
        update: ({ session }) => !!session?.data,
        delete: ({ session }) => !!session?.data,
      },
    },
    fields: {
      key: text(),
      value: text(),
      createdAt: timestamp({ defaultValue: { kind: 'now' } }),
      updatedAt: timestamp({ defaultValue: { kind: 'now' } }),
    },
  }),


}




================================================
File: src/keystone/seed.ts
================================================
import type { Context } from '.keystone/types'

export async function seedDemoData (context: Context) {
  if ((await context.db.User.count()) > 0) return

  for (const user of [
    {
      name: 'Clark',
    },
    {
      name: 'Bruce',
    },
    {
      name: 'Diana',
    },
  ] as const) {
    await context.db.User.createOne({ data: user })
  }
}


================================================
File: src/pages/api/graphql.ts
================================================
import { createYoga } from 'graphql-yoga'
import {
  type NextApiRequest,
  type NextApiResponse
} from 'next'
import { keystoneContext } from '../../keystone/context'

/*
  An example of how to setup your own yoga graphql server
  using the generated Keystone GraphQL schema.
*/
export const config = {
  api: {
    // Disable body parsing (required for file uploads)
    bodyParser: false,
  },
}

// Use Keystone API to create GraphQL handler
export default createYoga<{
  req: NextApiRequest
  res: NextApiResponse
}>({
  graphqlEndpoint: '/api/graphql',
  schema: keystoneContext.graphql.schema,
  /*
    `keystoneContext` object doesn't have user's session information.
    You need an authenticated context to CRUD data behind access control.
    keystoneContext.withRequest(req, res) automatically unwraps the session cookie
    in the request object and gives you a `context` object with session info
    and an elevated sudo context to bypass access control if needed (context.sudo()).
  */
  context: ({ req, res }) => keystoneContext.withRequest(req, res),
})


================================================
File: src/shared-theme/AppTheme.tsx
================================================
import * as React from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import type { ThemeOptions } from '@mui/material/styles';
import { inputsCustomizations } from './customizations/inputs';
import { dataDisplayCustomizations } from './customizations/dataDisplay';
import { feedbackCustomizations } from './customizations/feedback';
import { navigationCustomizations } from './customizations/navigation';
import { surfacesCustomizations } from './customizations/surfaces';
import { colorSchemes, typography, shadows, shape } from './themePrimitives';

interface AppThemeProps {
  children: React.ReactNode;
  /**
   * This is for the docs site. You can ignore it or remove it.
   */
  disableCustomTheme?: boolean;
  themeComponents?: ThemeOptions['components'];
}

export default function AppTheme(props: AppThemeProps) {
  const { children, disableCustomTheme, themeComponents } = props;
  const theme = React.useMemo(() => {
    return disableCustomTheme
      ? {}
      : createTheme({
          // For more details about CSS variables configuration, see https://mui.com/material-ui/customization/css-theme-variables/configuration/
          cssVariables: {
            colorSchemeSelector: 'data-mui-color-scheme',
            cssVarPrefix: 'template',
          },
          colorSchemes, // Recently added in v6 for building light & dark mode app, see https://mui.com/material-ui/customization/palette/#color-schemes
          typography,
          shadows,
          shape,
          components: {
            ...inputsCustomizations,
            ...dataDisplayCustomizations,
            ...feedbackCustomizations,
            ...navigationCustomizations,
            ...surfacesCustomizations,
            ...themeComponents,
          },
        });
  }, [disableCustomTheme, themeComponents]);
  if (disableCustomTheme) {
    return <React.Fragment>{children}</React.Fragment>;
  }
  return (
    <ThemeProvider theme={theme} disableTransitionOnChange>
      {children}
    </ThemeProvider>
  );
}


================================================
File: src/shared-theme/ColorModeIconDropdown.tsx
================================================
import * as React from 'react';
import DarkModeIcon from '@mui/icons-material/DarkModeRounded';
import LightModeIcon from '@mui/icons-material/LightModeRounded';
import Box from '@mui/material/Box';
import IconButton, { IconButtonOwnProps } from '@mui/material/IconButton';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { useColorScheme } from '@mui/material/styles';

export default function ColorModeIconDropdown(props: IconButtonOwnProps) {
  const { mode, systemMode, setMode } = useColorScheme();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleMode = (targetMode: 'system' | 'light' | 'dark') => () => {
    setMode(targetMode);
    handleClose();
  };
  if (!mode) {
    return (
      <Box
        data-screenshot="toggle-mode"
        sx={(theme) => ({
          verticalAlign: 'bottom',
          display: 'inline-flex',
          width: '2.25rem',
          height: '2.25rem',
          borderRadius: (theme.vars || theme).shape.borderRadius,
          border: '1px solid',
          borderColor: (theme.vars || theme).palette.divider,
        })}
      />
    );
  }
  const resolvedMode = (systemMode || mode) as 'light' | 'dark';
  const icon = {
    light: <LightModeIcon />,
    dark: <DarkModeIcon />,
  }[resolvedMode];
  return (
    <React.Fragment>
      <IconButton
        data-screenshot="toggle-mode"
        onClick={handleClick}
        disableRipple
        size="small"
        aria-controls={open ? 'color-scheme-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        {...props}
      >
        {icon}
      </IconButton>
      <Menu
        anchorEl={anchorEl}
        id="account-menu"
        open={open}
        onClose={handleClose}
        onClick={handleClose}
        slotProps={{
          paper: {
            variant: 'outlined',
            elevation: 0,
            sx: {
              my: '4px',
            },
          },
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem selected={mode === 'system'} onClick={handleMode('system')}>
          System
        </MenuItem>
        <MenuItem selected={mode === 'light'} onClick={handleMode('light')}>
          Light
        </MenuItem>
        <MenuItem selected={mode === 'dark'} onClick={handleMode('dark')}>
          Dark
        </MenuItem>
      </Menu>
    </React.Fragment>
  );
}


================================================
File: src/shared-theme/ColorModeSelect.tsx
================================================
import * as React from 'react';
import { useColorScheme } from '@mui/material/styles';
import MenuItem from '@mui/material/MenuItem';
import Select, { SelectProps } from '@mui/material/Select';

export default function ColorModeSelect(props: SelectProps) {
  const { mode, setMode } = useColorScheme();
  if (!mode) {
    return null;
  }
  return (
    <Select
      value={mode}
      onChange={(event) =>
        setMode(event.target.value as 'system' | 'light' | 'dark')
      }
      SelectDisplayProps={{
        // @ts-ignore
        'data-screenshot': 'toggle-mode',
      }}
      {...props}
    >
      <MenuItem value="system">Sistema</MenuItem>
      <MenuItem value="light">☀️ Claro</MenuItem>
      <MenuItem value="dark">🌙 Oscuro</MenuItem>
    </Select>
  );
}


================================================
File: src/shared-theme/themePrimitives.ts
================================================
import { createTheme, alpha, PaletteMode, Shadows } from '@mui/material/styles';

declare module '@mui/material/Paper' {
  interface PaperPropsVariantOverrides {
    highlighted: true;
  }
}
declare module '@mui/material/styles/createPalette' {
  interface ColorRange {
    50: string;
    100: string;
    200: string;
    300: string;
    400: string;
    500: string;
    600: string;
    700: string;
    800: string;
    900: string;
  }

  interface PaletteColor extends ColorRange {}

  interface Palette {
    baseShadow: string;
  }
}

const defaultTheme = createTheme();

const customShadows: Shadows = [...defaultTheme.shadows];

export const brand = {
  50: 'hsl(210, 100%, 95%)',
  100: 'hsl(210, 100%, 92%)',
  200: 'hsl(210, 100%, 80%)',
  300: 'hsl(210, 100%, 65%)',
  400: 'hsl(210, 98%, 48%)',
  500: 'hsl(210, 98%, 42%)',
  600: 'hsl(210, 98%, 55%)',
  700: 'hsl(210, 100%, 35%)',
  800: 'hsl(210, 100%, 16%)',
  900: 'hsl(210, 100%, 21%)',
};

export const gray = {
  50: 'hsl(220, 35%, 97%)',
  100: 'hsl(220, 30%, 94%)',
  200: 'hsl(220, 20%, 88%)',
  300: 'hsl(220, 20%, 80%)',
  400: 'hsl(220, 20%, 65%)',
  500: 'hsl(220, 20%, 42%)',
  600: 'hsl(220, 20%, 35%)',
  700: 'hsl(220, 20%, 25%)',
  800: 'hsl(220, 30%, 6%)',
  900: 'hsl(220, 35%, 3%)',
};

export const green = {
  50: 'hsl(120, 80%, 98%)',
  100: 'hsl(120, 75%, 94%)',
  200: 'hsl(120, 75%, 87%)',
  300: 'hsl(120, 61%, 77%)',
  400: 'hsl(120, 44%, 53%)',
  500: 'hsl(120, 59%, 30%)',
  600: 'hsl(120, 70%, 25%)',
  700: 'hsl(120, 75%, 16%)',
  800: 'hsl(120, 84%, 10%)',
  900: 'hsl(120, 87%, 6%)',
};

export const orange = {
  50: 'hsl(45, 100%, 97%)',
  100: 'hsl(45, 92%, 90%)',
  200: 'hsl(45, 94%, 80%)',
  300: 'hsl(45, 90%, 65%)',
  400: 'hsl(45, 90%, 40%)',
  500: 'hsl(45, 90%, 35%)',
  600: 'hsl(45, 91%, 25%)',
  700: 'hsl(45, 94%, 20%)',
  800: 'hsl(45, 95%, 16%)',
  900: 'hsl(45, 93%, 12%)',
};

export const red = {
  50: 'hsl(0, 100%, 97%)',
  100: 'hsl(0, 92%, 90%)',
  200: 'hsl(0, 94%, 80%)',
  300: 'hsl(0, 90%, 65%)',
  400: 'hsl(0, 90%, 40%)',
  500: 'hsl(0, 90%, 30%)',
  600: 'hsl(0, 91%, 25%)',
  700: 'hsl(0, 94%, 18%)',
  800: 'hsl(0, 95%, 12%)',
  900: 'hsl(0, 93%, 6%)',
};

export const getDesignTokens = (mode: PaletteMode) => {
  customShadows[1] =
    mode === 'dark'
      ? 'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px'
      : 'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px';

  return {
    palette: {
      mode,
      primary: {
        light: brand[200],
        main: brand[400],
        dark: brand[700],
        contrastText: brand[50],
        ...(mode === 'dark' && {
          contrastText: brand[50],
          light: brand[300],
          main: brand[400],
          dark: brand[700],
        }),
      },
      info: {
        light: brand[100],
        main: brand[300],
        dark: brand[600],
        contrastText: gray[50],
        ...(mode === 'dark' && {
          contrastText: brand[300],
          light: brand[500],
          main: brand[700],
          dark: brand[900],
        }),
      },
      warning: {
        light: orange[300],
        main: orange[400],
        dark: orange[800],
        ...(mode === 'dark' && {
          light: orange[400],
          main: orange[500],
          dark: orange[700],
        }),
      },
      error: {
        light: red[300],
        main: red[400],
        dark: red[800],
        ...(mode === 'dark' && {
          light: red[400],
          main: red[500],
          dark: red[700],
        }),
      },
      success: {
        light: green[300],
        main: green[400],
        dark: green[800],
        ...(mode === 'dark' && {
          light: green[400],
          main: green[500],
          dark: green[700],
        }),
      },
      grey: {
        ...gray,
      },
      divider: mode === 'dark' ? alpha(gray[700], 0.6) : alpha(gray[300], 0.4),
      background: {
        default: 'hsl(0, 0%, 99%)',
        paper: 'hsl(220, 35%, 97%)',
        ...(mode === 'dark' && { default: gray[900], paper: 'hsl(220, 30%, 7%)' }),
      },
      text: {
        primary: gray[800],
        secondary: gray[600],
        warning: orange[400],
        ...(mode === 'dark' && { primary: 'hsl(0, 0%, 100%)', secondary: gray[400] }),
      },
      action: {
        hover: alpha(gray[200], 0.2),
        selected: `${alpha(gray[200], 0.3)}`,
        ...(mode === 'dark' && {
          hover: alpha(gray[600], 0.2),
          selected: alpha(gray[600], 0.3),
        }),
      },
    },
    typography: {
      fontFamily: 'Inter, sans-serif',
      h1: {
        fontSize: defaultTheme.typography.pxToRem(48),
        fontWeight: 600,
        lineHeight: 1.2,
        letterSpacing: -0.5,
      },
      h2: {
        fontSize: defaultTheme.typography.pxToRem(36),
        fontWeight: 600,
        lineHeight: 1.2,
      },
      h3: {
        fontSize: defaultTheme.typography.pxToRem(30),
        lineHeight: 1.2,
      },
      h4: {
        fontSize: defaultTheme.typography.pxToRem(24),
        fontWeight: 600,
        lineHeight: 1.5,
      },
      h5: {
        fontSize: defaultTheme.typography.pxToRem(20),
        fontWeight: 600,
      },
      h6: {
        fontSize: defaultTheme.typography.pxToRem(18),
        fontWeight: 600,
      },
      subtitle1: {
        fontSize: defaultTheme.typography.pxToRem(18),
      },
      subtitle2: {
        fontSize: defaultTheme.typography.pxToRem(14),
        fontWeight: 500,
      },
      body1: {
        fontSize: defaultTheme.typography.pxToRem(14),
      },
      body2: {
        fontSize: defaultTheme.typography.pxToRem(14),
        fontWeight: 400,
      },
      caption: {
        fontSize: defaultTheme.typography.pxToRem(12),
        fontWeight: 400,
      },
    },
    shape: {
      borderRadius: 8,
    },
    shadows: customShadows,
  };
};

export const colorSchemes = {
  light: {
    palette: {
      primary: {
        light: brand[200],
        main: brand[400],
        dark: brand[700],
        contrastText: brand[50],
      },
      info: {
        light: brand[100],
        main: brand[300],
        dark: brand[600],
        contrastText: gray[50],
      },
      warning: {
        light: orange[300],
        main: orange[400],
        dark: orange[800],
      },
      error: {
        light: red[300],
        main: red[400],
        dark: red[800],
      },
      success: {
        light: green[300],
        main: green[400],
        dark: green[800],
      },
      grey: {
        ...gray,
      },
      divider: alpha(gray[300], 0.4),
      background: {
        default: 'hsl(0, 0%, 99%)',
        paper: 'hsl(220, 35%, 97%)',
      },
      text: {
        primary: gray[800],
        secondary: gray[600],
        warning: orange[400],
      },
      action: {
        hover: alpha(gray[200], 0.2),
        selected: `${alpha(gray[200], 0.3)}`,
      },
      baseShadow:
        'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px',
    },
  },
  dark: {
    palette: {
      primary: {
        contrastText: brand[50],
        light: brand[300],
        main: brand[400],
        dark: brand[700],
      },
      info: {
        contrastText: brand[300],
        light: brand[500],
        main: brand[700],
        dark: brand[900],
      },
      warning: {
        light: orange[400],
        main: orange[500],
        dark: orange[700],
      },
      error: {
        light: red[400],
        main: red[500],
        dark: red[700],
      },
      success: {
        light: green[400],
        main: green[500],
        dark: green[700],
      },
      grey: {
        ...gray,
      },
      divider: alpha(gray[700], 0.6),
      background: {
        default: gray[900],
        paper: 'hsl(220, 30%, 7%)',
      },
      text: {
        primary: 'hsl(0, 0%, 100%)',
        secondary: gray[400],
      },
      action: {
        hover: alpha(gray[600], 0.2),
        selected: alpha(gray[600], 0.3),
      },
      baseShadow:
        'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px',
    },
  },
};

export const typography = {
  fontFamily: 'Inter, sans-serif',
  h1: {
    fontSize: defaultTheme.typography.pxToRem(48),
    fontWeight: 600,
    lineHeight: 1.2,
    letterSpacing: -0.5,
  },
  h2: {
    fontSize: defaultTheme.typography.pxToRem(36),
    fontWeight: 600,
    lineHeight: 1.2,
  },
  h3: {
    fontSize: defaultTheme.typography.pxToRem(30),
    lineHeight: 1.2,
  },
  h4: {
    fontSize: defaultTheme.typography.pxToRem(24),
    fontWeight: 600,
    lineHeight: 1.5,
  },
  h5: {
    fontSize: defaultTheme.typography.pxToRem(20),
    fontWeight: 600,
  },
  h6: {
    fontSize: defaultTheme.typography.pxToRem(18),
    fontWeight: 600,
  },
  subtitle1: {
    fontSize: defaultTheme.typography.pxToRem(18),
  },
  subtitle2: {
    fontSize: defaultTheme.typography.pxToRem(14),
    fontWeight: 500,
  },
  body1: {
    fontSize: defaultTheme.typography.pxToRem(14),
  },
  body2: {
    fontSize: defaultTheme.typography.pxToRem(14),
    fontWeight: 400,
  },
  caption: {
    fontSize: defaultTheme.typography.pxToRem(12),
    fontWeight: 400,
  },
};

export const shape = {
  borderRadius: 8,
};

// @ts-ignore
const defaultShadows: Shadows = [
  'none',
  'var(--template-palette-baseShadow)',
  ...defaultTheme.shadows.slice(2),
];
export const shadows = defaultShadows;


================================================
File: src/shared-theme/customizations/dataDisplay.tsx
================================================
import { Theme, alpha, Components } from '@mui/material/styles';
import { svgIconClasses } from '@mui/material/SvgIcon';
import { typographyClasses } from '@mui/material/Typography';
import { buttonBaseClasses } from '@mui/material/ButtonBase';
import { chipClasses } from '@mui/material/Chip';
import { iconButtonClasses } from '@mui/material/IconButton';
import { gray, red, green } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const dataDisplayCustomizations: Components<Theme> = {
  MuiList: {
    styleOverrides: {
      root: {
        padding: '8px',
        display: 'flex',
        flexDirection: 'column',
        gap: 0,
      },
    },
  },
  MuiListItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        [`& .${svgIconClasses.root}`]: {
          width: '1rem',
          height: '1rem',
          color: (theme.vars || theme).palette.text.secondary,
        },
        [`& .${typographyClasses.root}`]: {
          fontWeight: 500,
        },
        [`& .${buttonBaseClasses.root}`]: {
          display: 'flex',
          gap: 8,
          padding: '2px 8px',
          borderRadius: (theme.vars || theme).shape.borderRadius,
          opacity: 0.7,
          '&.Mui-selected': {
            opacity: 1,
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
            [`& .${svgIconClasses.root}`]: {
              color: (theme.vars || theme).palette.text.primary,
            },
            '&:focus-visible': {
              backgroundColor: alpha(theme.palette.action.selected, 0.3),
            },
            '&:hover': {
              backgroundColor: alpha(theme.palette.action.selected, 0.5),
            },
          },
          '&:focus-visible': {
            backgroundColor: 'transparent',
          },
        },
      }),
    },
  },
  MuiListItemText: {
    styleOverrides: {
      primary: ({ theme }) => ({
        fontSize: theme.typography.body2.fontSize,
        fontWeight: 500,
        lineHeight: theme.typography.body2.lineHeight,
      }),
      secondary: ({ theme }) => ({
        fontSize: theme.typography.caption.fontSize,
        lineHeight: theme.typography.caption.lineHeight,
      }),
    },
  },
  MuiListSubheader: {
    styleOverrides: {
      root: ({ theme }) => ({
        backgroundColor: 'transparent',
        padding: '4px 8px',
        fontSize: theme.typography.caption.fontSize,
        fontWeight: 500,
        lineHeight: theme.typography.caption.lineHeight,
      }),
    },
  },
  MuiListItemIcon: {
    styleOverrides: {
      root: {
        minWidth: 0,
      },
    },
  },
  MuiChip: {
    defaultProps: {
      size: 'small',
    },
    styleOverrides: {
      root: ({ theme }) => ({
        border: '1px solid',
        borderRadius: '999px',
        [`& .${chipClasses.label}`]: {
          fontWeight: 600,
        },
        variants: [
          {
            props: {
              color: 'default',
            },
            style: {
              borderColor: gray[200],
              backgroundColor: gray[100],
              [`& .${chipClasses.label}`]: {
                color: gray[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: gray[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: gray[700],
                backgroundColor: gray[800],
                [`& .${chipClasses.label}`]: {
                  color: gray[300],
                },
                [`& .${chipClasses.icon}`]: {
                  color: gray[300],
                },
              }),
            },
          },
          {
            props: {
              color: 'success',
            },
            style: {
              borderColor: green[200],
              backgroundColor: green[50],
              [`& .${chipClasses.label}`]: {
                color: green[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: green[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: green[800],
                backgroundColor: green[900],
                [`& .${chipClasses.label}`]: {
                  color: green[300],
                },
                [`& .${chipClasses.icon}`]: {
                  color: green[300],
                },
              }),
            },
          },
          {
            props: {
              color: 'error',
            },
            style: {
              borderColor: red[100],
              backgroundColor: red[50],
              [`& .${chipClasses.label}`]: {
                color: red[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: red[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: red[800],
                backgroundColor: red[900],
                [`& .${chipClasses.label}`]: {
                  color: red[200],
                },
                [`& .${chipClasses.icon}`]: {
                  color: red[300],
                },
              }),
            },
          },
          {
            props: { size: 'small' },
            style: {
              maxHeight: 20,
              [`& .${chipClasses.label}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
              [`& .${svgIconClasses.root}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
            },
          },
          {
            props: { size: 'medium' },
            style: {
              [`& .${chipClasses.label}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
            },
          },
        ],
      }),
    },
  },
  MuiTablePagination: {
    styleOverrides: {
      actions: {
        display: 'flex',
        gap: 8,
        marginRight: 6,
        [`& .${iconButtonClasses.root}`]: {
          minWidth: 0,
          width: 36,
          height: 36,
        },
      },
    },
  },
  MuiIcon: {
    defaultProps: {
      fontSize: 'small',
    },
    styleOverrides: {
      root: {
        variants: [
          {
            props: {
              fontSize: 'small',
            },
            style: {
              fontSize: '1rem',
            },
          },
        ],
      },
    },
  },
};


================================================
File: src/shared-theme/customizations/feedback.tsx
================================================
import { Theme, alpha, Components } from '@mui/material/styles';
import { gray, orange } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const feedbackCustomizations: Components<Theme> = {
  MuiAlert: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: 10,
        backgroundColor: orange[100],
        color: (theme.vars || theme).palette.text.primary,
        border: `1px solid ${alpha(orange[300], 0.5)}`,
        '& .MuiAlert-icon': {
          color: orange[500],
        },
        ...theme.applyStyles('dark', {
          backgroundColor: `${alpha(orange[900], 0.5)}`,
          border: `1px solid ${alpha(orange[800], 0.5)}`,
        }),
      }),
    },
  },
  MuiDialog: {
    styleOverrides: {
      root: ({ theme }) => ({
        '& .MuiDialog-paper': {
          borderRadius: '10px',
          border: '1px solid',
          borderColor: (theme.vars || theme).palette.divider,
        },
      }),
    },
  },
  MuiLinearProgress: {
    styleOverrides: {
      root: ({ theme }) => ({
        height: 8,
        borderRadius: 8,
        backgroundColor: gray[200],
        ...theme.applyStyles('dark', {
          backgroundColor: gray[800],
        }),
      }),
    },
  },
};


================================================
File: src/shared-theme/customizations/inputs.tsx
================================================
import * as React from 'react';
import { alpha, Theme, Components } from '@mui/material/styles';
import { outlinedInputClasses } from '@mui/material/OutlinedInput';
import { svgIconClasses } from '@mui/material/SvgIcon';
import { toggleButtonGroupClasses } from '@mui/material/ToggleButtonGroup';
import { toggleButtonClasses } from '@mui/material/ToggleButton';
import CheckBoxOutlineBlankRoundedIcon from '@mui/icons-material/CheckBoxOutlineBlankRounded';
import CheckRoundedIcon from '@mui/icons-material/CheckRounded';
import RemoveRoundedIcon from '@mui/icons-material/RemoveRounded';
import { gray, brand } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const inputsCustomizations: Components<Theme> = {
  MuiButtonBase: {
    defaultProps: {
      disableTouchRipple: true,
      disableRipple: true,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        boxSizing: 'border-box',
        transition: 'all 100ms ease-in',
        '&:focus-visible': {
          outline: `3px solid ${alpha(theme.palette.primary.main, 0.5)}`,
          outlineOffset: '2px',
        },
      }),
    },
  },
  MuiButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        boxShadow: 'none',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        textTransform: 'none',
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              height: '2.25rem',
              padding: '8px 12px',
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              height: '2.5rem', // 40px
            },
          },
          {
            props: {
              color: 'primary',
              variant: 'contained',
            },
            style: {
              color: 'white',
              backgroundColor: gray[900],
              backgroundImage: `linear-gradient(to bottom, ${gray[700]}, ${gray[800]})`,
              boxShadow: `inset 0 1px 0 ${gray[600]}, inset 0 -1px 0 1px hsl(220, 0%, 0%)`,
              border: `1px solid ${gray[700]}`,
              '&:hover': {
                backgroundImage: 'none',
                backgroundColor: gray[700],
                boxShadow: 'none',
              },
              '&:active': {
                backgroundColor: gray[800],
              },
              ...theme.applyStyles('dark', {
                color: 'black',
                backgroundColor: gray[50],
                backgroundImage: `linear-gradient(to bottom, ${gray[100]}, ${gray[50]})`,
                boxShadow: 'inset 0 -1px 0  hsl(220, 30%, 80%)',
                border: `1px solid ${gray[50]}`,
                '&:hover': {
                  backgroundImage: 'none',
                  backgroundColor: gray[300],
                  boxShadow: 'none',
                },
                '&:active': {
                  backgroundColor: gray[400],
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'contained',
            },
            style: {
              color: 'white',
              backgroundColor: brand[300],
              backgroundImage: `linear-gradient(to bottom, ${alpha(brand[400], 0.8)}, ${brand[500]})`,
              boxShadow: `inset 0 2px 0 ${alpha(brand[200], 0.2)}, inset 0 -2px 0 ${alpha(brand[700], 0.4)}`,
              border: `1px solid ${brand[500]}`,
              '&:hover': {
                backgroundColor: brand[700],
                boxShadow: 'none',
              },
              '&:active': {
                backgroundColor: brand[700],
                backgroundImage: 'none',
              },
            },
          },
          {
            props: {
              variant: 'outlined',
            },
            style: {
              color: (theme.vars || theme).palette.text.primary,
              border: '1px solid',
              borderColor: gray[200],
              backgroundColor: alpha(gray[50], 0.3),
              '&:hover': {
                backgroundColor: gray[100],
                borderColor: gray[300],
              },
              '&:active': {
                backgroundColor: gray[200],
              },
              ...theme.applyStyles('dark', {
                backgroundColor: gray[800],
                borderColor: gray[700],

                '&:hover': {
                  backgroundColor: gray[900],
                  borderColor: gray[600],
                },
                '&:active': {
                  backgroundColor: gray[900],
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'outlined',
            },
            style: {
              color: brand[700],
              border: '1px solid',
              borderColor: brand[200],
              backgroundColor: brand[50],
              '&:hover': {
                backgroundColor: brand[100],
                borderColor: brand[400],
              },
              '&:active': {
                backgroundColor: alpha(brand[200], 0.7),
              },
              ...theme.applyStyles('dark', {
                color: brand[50],
                border: '1px solid',
                borderColor: brand[900],
                backgroundColor: alpha(brand[900], 0.3),
                '&:hover': {
                  borderColor: brand[700],
                  backgroundColor: alpha(brand[900], 0.6),
                },
                '&:active': {
                  backgroundColor: alpha(brand[900], 0.5),
                },
              }),
            },
          },
          {
            props: {
              variant: 'text',
            },
            style: {
              color: gray[600],
              '&:hover': {
                backgroundColor: gray[100],
              },
              '&:active': {
                backgroundColor: gray[200],
              },
              ...theme.applyStyles('dark', {
                color: gray[50],
                '&:hover': {
                  backgroundColor: gray[700],
                },
                '&:active': {
                  backgroundColor: alpha(gray[700], 0.7),
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'text',
            },
            style: {
              color: brand[700],
              '&:hover': {
                backgroundColor: alpha(brand[100], 0.5),
              },
              '&:active': {
                backgroundColor: alpha(brand[200], 0.7),
              },
              ...theme.applyStyles('dark', {
                color: brand[100],
                '&:hover': {
                  backgroundColor: alpha(brand[900], 0.5),
                },
                '&:active': {
                  backgroundColor: alpha(brand[900], 0.3),
                },
              }),
            },
          },
        ],
      }),
    },
  },
  MuiIconButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        boxShadow: 'none',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        textTransform: 'none',
        fontWeight: theme.typography.fontWeightMedium,
        letterSpacing: 0,
        color: (theme.vars || theme).palette.text.primary,
        border: '1px solid ',
        borderColor: gray[200],
        backgroundColor: alpha(gray[50], 0.3),
        '&:hover': {
          backgroundColor: gray[100],
          borderColor: gray[300],
        },
        '&:active': {
          backgroundColor: gray[200],
        },
        ...theme.applyStyles('dark', {
          backgroundColor: gray[800],
          borderColor: gray[700],
          '&:hover': {
            backgroundColor: gray[900],
            borderColor: gray[600],
          },
          '&:active': {
            backgroundColor: gray[900],
          },
        }),
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              width: '2.25rem',
              height: '2.25rem',
              padding: '0.25rem',
              [`& .${svgIconClasses.root}`]: { fontSize: '1rem' },
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              width: '2.5rem',
              height: '2.5rem',
            },
          },
        ],
      }),
    },
  },
  MuiToggleButtonGroup: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: '10px',
        boxShadow: `0 4px 16px ${alpha(gray[400], 0.2)}`,
        [`& .${toggleButtonGroupClasses.selected}`]: {
          color: brand[500],
        },
        ...theme.applyStyles('dark', {
          [`& .${toggleButtonGroupClasses.selected}`]: {
            color: '#fff',
          },
          boxShadow: `0 4px 16px ${alpha(brand[700], 0.5)}`,
        }),
      }),
    },
  },
  MuiToggleButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        padding: '12px 16px',
        textTransform: 'none',
        borderRadius: '10px',
        fontWeight: 500,
        ...theme.applyStyles('dark', {
          color: gray[400],
          boxShadow: '0 4px 16px rgba(0, 0, 0, 0.5)',
          [`&.${toggleButtonClasses.selected}`]: {
            color: brand[300],
          },
        }),
      }),
    },
  },
  MuiCheckbox: {
    defaultProps: {
      disableRipple: true,
      icon: (
        <CheckBoxOutlineBlankRoundedIcon sx={{ color: 'hsla(210, 0%, 0%, 0.0)' }} />
      ),
      checkedIcon: <CheckRoundedIcon sx={{ height: 14, width: 14 }} />,
      indeterminateIcon: <RemoveRoundedIcon sx={{ height: 14, width: 14 }} />,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        margin: 10,
        height: 16,
        width: 16,
        borderRadius: 5,
        border: '1px solid ',
        borderColor: alpha(gray[300], 0.8),
        boxShadow: '0 0 0 1.5px hsla(210, 0%, 0%, 0.04) inset',
        backgroundColor: alpha(gray[100], 0.4),
        transition: 'border-color, background-color, 120ms ease-in',
        '&:hover': {
          borderColor: brand[300],
        },
        '&.Mui-focusVisible': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          borderColor: brand[400],
        },
        '&.Mui-checked': {
          color: 'white',
          backgroundColor: brand[500],
          borderColor: brand[500],
          boxShadow: `none`,
          '&:hover': {
            backgroundColor: brand[600],
          },
        },
        ...theme.applyStyles('dark', {
          borderColor: alpha(gray[700], 0.8),
          boxShadow: '0 0 0 1.5px hsl(210, 0%, 0%) inset',
          backgroundColor: alpha(gray[900], 0.8),
          '&:hover': {
            borderColor: brand[300],
          },
          '&.Mui-focusVisible': {
            borderColor: brand[400],
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
          },
        }),
      }),
    },
  },
  MuiInputBase: {
    styleOverrides: {
      root: {
        border: 'none',
      },
      input: {
        '&::placeholder': {
          opacity: 0.7,
          color: gray[500],
        },
      },
    },
  },
  MuiOutlinedInput: {
    styleOverrides: {
      input: {
        padding: 0,
      },
      root: ({ theme }) => ({
        padding: '8px 12px',
        color: (theme.vars || theme).palette.text.primary,
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        backgroundColor: (theme.vars || theme).palette.background.default,
        transition: 'border 120ms ease-in',
        '&:hover': {
          borderColor: gray[400],
        },
        [`&.${outlinedInputClasses.focused}`]: {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          borderColor: brand[400],
        },
        ...theme.applyStyles('dark', {
          '&:hover': {
            borderColor: gray[500],
          },
        }),
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              height: '2.25rem',
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              height: '2.5rem',
            },
          },
        ],
      }),
      notchedOutline: {
        border: 'none',
      },
    },
  },
  MuiInputAdornment: {
    styleOverrides: {
      root: ({ theme }) => ({
        color: (theme.vars || theme).palette.grey[500],
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[400],
        }),
      }),
    },
  },
  MuiFormLabel: {
    styleOverrides: {
      root: ({ theme }) => ({
        typography: theme.typography.caption,
        marginBottom: 8,
      }),
    },
  },
};


================================================
File: src/shared-theme/customizations/navigation.tsx
================================================
import * as React from 'react';
import { Theme, alpha, Components } from '@mui/material/styles';
import { SvgIconProps } from '@mui/material/SvgIcon';
import { buttonBaseClasses } from '@mui/material/ButtonBase';
import { dividerClasses } from '@mui/material/Divider';
import { menuItemClasses } from '@mui/material/MenuItem';
import { selectClasses } from '@mui/material/Select';
import { tabClasses } from '@mui/material/Tab';
import UnfoldMoreRoundedIcon from '@mui/icons-material/UnfoldMoreRounded';
import { gray, brand } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const navigationCustomizations: Components<Theme> = {
  MuiMenuItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: (theme.vars || theme).shape.borderRadius,
        padding: '6px 8px',
        [`&.${menuItemClasses.focusVisible}`]: {
          backgroundColor: 'transparent',
        },
        [`&.${menuItemClasses.selected}`]: {
          [`&.${menuItemClasses.focusVisible}`]: {
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
          },
        },
      }),
    },
  },
  MuiMenu: {
    styleOverrides: {
      list: {
        gap: '0px',
        [`&.${dividerClasses.root}`]: {
          margin: '0 -8px',
        },
      },
      paper: ({ theme }) => ({
        marginTop: '4px',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        backgroundImage: 'none',
        background: 'hsl(0, 0%, 100%)',
        boxShadow:
          'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px',
        [`& .${buttonBaseClasses.root}`]: {
          '&.Mui-selected': {
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
          },
        },
        ...theme.applyStyles('dark', {
          background: gray[900],
          boxShadow:
            'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px',
        }),
      }),
    },
  },
  MuiSelect: {
    defaultProps: {
      IconComponent: React.forwardRef<SVGSVGElement, SvgIconProps>((props, ref) => (
        <UnfoldMoreRoundedIcon fontSize="small" {...props} ref={ref} />
      )),
    },
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: '1px solid',
        borderColor: gray[200],
        backgroundColor: (theme.vars || theme).palette.background.paper,
        boxShadow: `inset 0 1px 0 1px hsla(220, 0%, 100%, 0.6), inset 0 -1px 0 1px hsla(220, 35%, 90%, 0.5)`,
        '&:hover': {
          borderColor: gray[300],
          backgroundColor: (theme.vars || theme).palette.background.paper,
          boxShadow: 'none',
        },
        [`&.${selectClasses.focused}`]: {
          outlineOffset: 0,
          borderColor: gray[400],
        },
        '&:before, &:after': {
          display: 'none',
        },

        ...theme.applyStyles('dark', {
          borderRadius: (theme.vars || theme).shape.borderRadius,
          borderColor: gray[700],
          backgroundColor: (theme.vars || theme).palette.background.paper,
          boxShadow: `inset 0 1px 0 1px ${alpha(gray[700], 0.15)}, inset 0 -1px 0 1px hsla(220, 0%, 0%, 0.7)`,
          '&:hover': {
            borderColor: alpha(gray[700], 0.7),
            backgroundColor: (theme.vars || theme).palette.background.paper,
            boxShadow: 'none',
          },
          [`&.${selectClasses.focused}`]: {
            outlineOffset: 0,
            borderColor: gray[900],
          },
          '&:before, &:after': {
            display: 'none',
          },
        }),
      }),
      select: ({ theme }) => ({
        display: 'flex',
        alignItems: 'center',
        ...theme.applyStyles('dark', {
          display: 'flex',
          alignItems: 'center',
          '&:focus-visible': {
            backgroundColor: gray[900],
          },
        }),
      }),
    },
  },
  MuiLink: {
    defaultProps: {
      underline: 'none',
    },
    styleOverrides: {
      root: ({ theme }) => ({
        color: (theme.vars || theme).palette.text.primary,
        fontWeight: 500,
        position: 'relative',
        textDecoration: 'none',
        width: 'fit-content',
        '&::before': {
          content: '""',
          position: 'absolute',
          width: '100%',
          height: '1px',
          bottom: 0,
          left: 0,
          backgroundColor: (theme.vars || theme).palette.text.secondary,
          opacity: 0.3,
          transition: 'width 0.3s ease, opacity 0.3s ease',
        },
        '&:hover::before': {
          width: 0,
        },
        '&:focus-visible': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '4px',
          borderRadius: '2px',
        },
      }),
    },
  },
  MuiDrawer: {
    styleOverrides: {
      paper: ({ theme }) => ({
        backgroundColor: (theme.vars || theme).palette.background.default,
      }),
    },
  },
  MuiPaginationItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        '&.Mui-selected': {
          color: 'white',
          backgroundColor: (theme.vars || theme).palette.grey[900],
        },
        ...theme.applyStyles('dark', {
          '&.Mui-selected': {
            color: 'black',
            backgroundColor: (theme.vars || theme).palette.grey[50],
          },
        }),
      }),
    },
  },
  MuiTabs: {
    styleOverrides: {
      root: { minHeight: 'fit-content' },
      indicator: ({ theme }) => ({
        backgroundColor: (theme.vars || theme).palette.grey[800],
        ...theme.applyStyles('dark', {
          backgroundColor: (theme.vars || theme).palette.grey[200],
        }),
      }),
    },
  },
  MuiTab: {
    styleOverrides: {
      root: ({ theme }) => ({
        padding: '6px 8px',
        marginBottom: '8px',
        textTransform: 'none',
        minWidth: 'fit-content',
        minHeight: 'fit-content',
        color: (theme.vars || theme).palette.text.secondary,
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: '1px solid',
        borderColor: 'transparent',
        ':hover': {
          color: (theme.vars || theme).palette.text.primary,
          backgroundColor: gray[100],
          borderColor: gray[200],
        },
        [`&.${tabClasses.selected}`]: {
          color: gray[900],
        },
        ...theme.applyStyles('dark', {
          ':hover': {
            color: (theme.vars || theme).palette.text.primary,
            backgroundColor: gray[800],
            borderColor: gray[700],
          },
          [`&.${tabClasses.selected}`]: {
            color: '#fff',
          },
        }),
      }),
    },
  },
  MuiStepConnector: {
    styleOverrides: {
      line: ({ theme }) => ({
        borderTop: '1px solid',
        borderColor: (theme.vars || theme).palette.divider,
        flex: 1,
        borderRadius: '99px',
      }),
    },
  },
  MuiStepIcon: {
    styleOverrides: {
      root: ({ theme }) => ({
        color: 'transparent',
        border: `1px solid ${gray[400]}`,
        width: 12,
        height: 12,
        borderRadius: '50%',
        '& text': {
          display: 'none',
        },
        '&.Mui-active': {
          border: 'none',
          color: (theme.vars || theme).palette.primary.main,
        },
        '&.Mui-completed': {
          border: 'none',
          color: (theme.vars || theme).palette.success.main,
        },
        ...theme.applyStyles('dark', {
          border: `1px solid ${gray[700]}`,
          '&.Mui-active': {
            border: 'none',
            color: (theme.vars || theme).palette.primary.light,
          },
          '&.Mui-completed': {
            border: 'none',
            color: (theme.vars || theme).palette.success.light,
          },
        }),
        variants: [
          {
            props: { completed: true },
            style: {
              width: 12,
              height: 12,
            },
          },
        ],
      }),
    },
  },
  MuiStepLabel: {
    styleOverrides: {
      label: ({ theme }) => ({
        '&.Mui-completed': {
          opacity: 0.6,
          ...theme.applyStyles('dark', { opacity: 0.5 }),
        },
      }),
    },
  },
};


================================================
File: src/shared-theme/customizations/surfaces.ts
================================================
import { alpha, Theme, Components } from '@mui/material/styles';
import { gray } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const surfacesCustomizations: Components<Theme> = {
  MuiAccordion: {
    defaultProps: {
      elevation: 0,
      disableGutters: true,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        padding: 4,
        overflow: 'clip',
        backgroundColor: (theme.vars || theme).palette.background.default,
        border: '1px solid',
        borderColor: (theme.vars || theme).palette.divider,
        ':before': {
          backgroundColor: 'transparent',
        },
        '&:not(:last-of-type)': {
          borderBottom: 'none',
        },
        '&:first-of-type': {
          borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        },
        '&:last-of-type': {
          borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
        },
      }),
    },
  },
  MuiAccordionSummary: {
    styleOverrides: {
      root: ({ theme }) => ({
        border: 'none',
        borderRadius: 8,
        '&:hover': { backgroundColor: gray[50] },
        '&:focus-visible': { backgroundColor: 'transparent' },
        ...theme.applyStyles('dark', {
          '&:hover': { backgroundColor: gray[800] },
        }),
      }),
    },
  },
  MuiAccordionDetails: {
    styleOverrides: {
      root: { mb: 20, border: 'none' },
    },
  },
  MuiPaper: {
    defaultProps: {
      elevation: 0,
    },
  },
  MuiCard: {
    styleOverrides: {
      root: ({ theme }) => {
        return {
          padding: 16,
          gap: 16,
          transition: 'all 100ms ease',
          backgroundColor: gray[50],
          borderRadius: (theme.vars || theme).shape.borderRadius,
          border: `1px solid ${(theme.vars || theme).palette.divider}`,
          boxShadow: 'none',
          ...theme.applyStyles('dark', {
            backgroundColor: gray[800],
          }),
          variants: [
            {
              props: {
                variant: 'outlined',
              },
              style: {
                border: `1px solid ${(theme.vars || theme).palette.divider}`,
                boxShadow: 'none',
                background: 'hsl(0, 0%, 100%)',
                ...theme.applyStyles('dark', {
                  background: alpha(gray[900], 0.4),
                }),
              },
            },
          ],
        };
      },
    },
  },
  MuiCardContent: {
    styleOverrides: {
      root: {
        padding: 0,
        '&:last-child': { paddingBottom: 0 },
      },
    },
  },
  MuiCardHeader: {
    styleOverrides: {
      root: {
        padding: 0,
      },
    },
  },
  MuiCardActions: {
    styleOverrides: {
      root: {
        padding: 0,
      },
    },
  },
};


================================================
File: src/styles/globals.css
================================================
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,
    Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

html {
  max-width: 70ch;
  padding: 2em 1em;
  margin: auto;
  line-height: 1.75;
}

* {
  box-sizing: border-box;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }

  body {
    color: white;
    background: black;
  }
}

input {
  min-height: 2rem;
}

button {
  height: 2rem;
  min-width: 4rem;
}


================================================
File: src/util/emotion-cache.ts
================================================
// /utils/emotion-cache.ts
import createCache from '@emotion/cache';

const isBrowser = typeof document !== 'undefined';

// Crea un caché compatible con SSR
export const createEmotionCache = () =>
  createCache({ key: 'css', prepend: true });


================================================
File: src/util/login.ts
================================================
import { keystoneContext } from '../keystone/context';

export async function loginUser(email: string, password: string) {
  try {
    const context = keystoneContext.sudo();

    // Llama a la mutación de Keystone para autenticar
    const result = await context.graphql.run({
      query: `
        mutation Authenticate($email: String!, $password: String!) {
          authenticateUserWithPassword(email: $email, password: $password) {
            ... on UserAuthenticationWithPasswordSuccess {
              sessionToken
              item {
                id
                name
                email
                rol {
                  level
                }
              }
            }
            ... on UserAuthenticationWithPasswordFailure {
              message
            }
          }
        }
      `,
      variables: { email, password },
    });

    const authResult = result.authenticateUserWithPassword;

    if (authResult?.__typename === 'UserAuthenticationWithPasswordSuccess') {
      return {
        token: authResult.sessionToken,
        user: authResult.item,
      };
    } else {
      throw new Error(authResult?.message || 'Error al autenticar');
    }
  } catch (error) {
    console.error('Error en loginUser:', error);
    throw new Error('Error al autenticar usuario');
  }
}


================================================
File: src/util/request.ts
================================================
import { GraphQLClient } from 'graphql-request'

export const client = new GraphQLClient('/api/graphql/')


